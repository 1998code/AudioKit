//
//  AKCustomEffect.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** This is was built using the JC reverb implentation found in FAUST. According to
 the source code, the specifications for this implementation were found on an old
 SAIL DART backup tape.
 This class is derived from the CLM JCRev function, which is based on the use of
 networks of simple allpass and comb delay filters.  This class implements three
 series allpass units, followed by four parallel comb filters, and two
 decorrelation delay lines in parallel at the output. */
public class AKCustomEffect: AKNode {

    // MARK: - Properties

    private var internalAU: AKCustomEffectAudioUnit?
    private var token: AUParameterObserverToken?

    // MARK: - Initializers

    /** Initialize this reverb node */
    public init(_ input: AKNode, sporth: String) {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x6373746d /*'cstm'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKCustomEffectAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKCustomEffect",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKCustomEffectAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: AKManager.format)
            self.internalAU?.setSporth(sporth)
        }

        guard let tree = internalAU?.parameterTree else { return }


        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
            }
        }

    }
}

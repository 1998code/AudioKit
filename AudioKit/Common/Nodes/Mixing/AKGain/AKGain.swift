//
//  AKGain.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** This module lowers or raises the volume of an input. */
public struct AKGain: AKNode {

    // MARK: - Properties

    private var internalAU: AKGainAudioUnit?
    public var avAudioNode: AVAudioNode
    private var token: AUParameterObserverToken?

    private var gainParameter: AUParameter?

    /** Amplification Factor */
    public var gain: Double = 1.0 {
        didSet {
            gainParameter?.setValue(Float(gain), originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this amplification node */
    public init(
        _ input: AKNode,
        gain: Double = 1.0) {

        self.gain = gain

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x6761696e /*'gain'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKGainAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKGain",
            version: UInt32.max)

        self.avAudioNode = AVAudioNode()
        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.avAudioNode = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKGainAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.avAudioNode)
            AKManager.sharedInstance.engine.connect(input.avAudioNode, to: self.avAudioNode, format: AKManager.format)
        }

        guard let tree = internalAU?.parameterTree else { return }

        gainParameter  = tree.valueForKey("gain")  as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.gainParameter!.address {
                    self.gain = Double(value)
                }
            }
        }

        gainParameter?.setValue(Float(gain), originator: token!)

    }
}

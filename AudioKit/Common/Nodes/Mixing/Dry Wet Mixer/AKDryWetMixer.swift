//
//  AKDryWetMixer.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/// This mixes two inputs with a balance point
///
/// - parameter dry: Dry Input (or just input 1)
/// - parameter wet: Wet Input (or just input 2)
/// - parameter t: Balance Point (0 = all dry, 1 = all wet)
///
public class AKDryWetMixer: AKNode, AKToggleable {

    // MARK: - Properties

    /// Required property for AKNode
    public var avAudioNode: AVAudioNode
    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()

    internal var internalAU: AKDryWetMixerAudioUnit?
    internal var token: AUParameterObserverToken?
    
    private var balanceParameter: AUParameter?
    
    /// Balance from all dry (0) to all wet (1)
    public var balance: Double = 0 {
        didSet {
            balanceParameter?.setValue(Float(balance), originator: token!)
        }
    }
    
    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted: Bool {
        return internalAU!.isPlaying()
    }

    // MARK: - Initialization

    /// Initialize this balance node
    ///
    /// - parameter dry: Dry Input (or just input 1)
    /// - parameter wet: Wet Input (or just input 2)
    /// - parameter t: Balance Point (0 = all dry, 1 = all wet)
    ///
    public init(var _ dry: AKNode, var _ wet: AKNode, t balance: Double) {
        
        self.balance = balance

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Mixer
        description.componentSubType      = 0x626c6e63 /*'blnc'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKDryWetMixerAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKDryWetMixer",
            version: UInt32.max)

        self.avAudioNode = AVAudioNode()
        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.avAudioNode = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKDryWetMixerAudioUnit

            AKManager.sharedInstance.engine.attachNode(self.avAudioNode)
            dry.addConnectionPoint(self)
            
            wet.connectionPoints.append(AVAudioConnectionPoint(node: self.avAudioNode, bus: 1))
            AKManager.sharedInstance.engine.connect(wet.avAudioNode, toConnectionPoints: wet.connectionPoints, fromBus: 0, format: nil)
        }
        
        guard let tree = internalAU?.parameterTree else { return }
        
        balanceParameter   = tree.valueForKey("balance")   as? AUParameter
        
        token = tree.tokenByAddingParameterObserver {
            address, value in
            
            dispatch_async(dispatch_get_main_queue()) {
                if address == self.balanceParameter!.address {
                    self.balance = Double(value)
                }
            }
        }
        balanceParameter?.setValue(Float(balance), originator: token!)
    }
    
    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        self.internalAU!.start()
    }
    
    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        self.internalAU!.stop()
    }
}

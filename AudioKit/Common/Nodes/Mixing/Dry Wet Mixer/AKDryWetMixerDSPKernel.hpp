//
//  AKDryWetMixerDSPKernel.hpp
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

#ifndef AKDryWetMixerDSPKernel_hpp
#define AKDryWetMixerDSPKernel_hpp

#import "AKDSPKernel.hpp"
#import "AKParameterRamper.hpp"

enum {
    balanceAddress = 0
};


class AKDryWetMixerDSPKernel : public AKDSPKernel {
public:
    // MARK: Member Functions

    AKDryWetMixerDSPKernel() {}

    void init(int channelCount, double inSampleRate) {
        channels = channelCount;

        sampleRate = float(inSampleRate);
    }

    void start() {
        started = true;
    }
    
    void stop() {
        started = false;
    }
    
    void destroy() {
    }
    
    void reset() {
    }

    void setParameter(AUParameterAddress address, AUValue value) {
        switch (address) {
            case balanceAddress:
                balanceRamper.set(clamp(value, (float)-1, (float)1));
                break;
                
        }
    }
    
    AUValue getParameter(AUParameterAddress address) {
        switch (address) {
            case balanceAddress:
                return balanceRamper.goal();
                
            default: return 0.0f;
        }
    }
    
    void startRamp(AUParameterAddress address, AUValue value, AUAudioFrameCount duration) override {
        switch (address) {
            case balanceAddress:
                balanceRamper.startRamp(clamp(value, (float)-1, (float)1), duration);
                break;
                
        }
    }

    void setBuffers(AudioBufferList* dryBufferList, AudioBufferList *wetBufferList, AudioBufferList* outBufferList) {
        
        dryBufferListPtr = dryBufferList;
        wetBufferListPtr = wetBufferList;
        outBufferListPtr = outBufferList;
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override {
        
        // For each sample.
        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
            double balance = double(balanceRamper.getStep());
            int frameOffset = int(frameIndex + bufferOffset);


            for (int channel = 0; channel < channels; ++channel) {
                float *dry  = (float *)dryBufferListPtr->mBuffers[channel].mData + frameOffset;
                float *wet  = (float *)wetBufferListPtr->mBuffers[channel].mData + frameOffset;
                float *out  = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;
                *out = *dry * (1.0 - balance) + *wet * balance;

            }
        }
    }

    // MARK: Member Variables

private:

    int channels = 2;
    int inputChannels = 4;
    float sampleRate = 44100.0;

    AudioBufferList* dryBufferListPtr = nullptr;
    AudioBufferList* wetBufferListPtr = nullptr;
    AudioBufferList* outBufferListPtr = nullptr;

public:
    bool started = true;
    AKParameterRamper balanceRamper = 0;
};

#endif /* AKDryWetMixerDSPKernel_hpp */

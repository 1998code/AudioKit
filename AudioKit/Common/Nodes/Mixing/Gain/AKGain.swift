//
//  AKGain.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/// This module lowers or raises the volume of an input.
public class AKGain: AKNode, AKToggleable {

    // MARK: - Properties

    private var internalAU: AKGainAudioUnit?
    
    /// Required property for AKNode
    public var avAudioNode: AVAudioNode
    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()
    
    /// Amplification Factor
    public var gain: Double = 1.0 {
        didSet {
            internalAU?.setGain(Float(gain))
        }
    }
    
    private var lastKnownGain: Double = 1.0
    
    public var isStarted: Bool {
        return gain != 1.0
    }

    // MARK: - Initialization

    /// Initialize this amplification node
    ///
    /// - parameter input: AKNode whose output will be amplified
    /// - parameter gain: Amplification factor (Default: 1, Minimum: 0)
    ///
    public init(
        var _ input: AKNode,
        gain: Double = 1.0) {

        self.gain = gain

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x6761696e /*'gain'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKGainAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKGain",
            version: UInt32.max)

        self.avAudioNode = AVAudioNode()
        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.avAudioNode = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKGainAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.avAudioNode)
            input.addConnectionPoint(self)
        }
        internalAU?.setGain(Float(gain))
    }
    
    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        if isStopped {
            gain = lastKnownGain
        }
    }
    
    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        if isPlaying {
            lastKnownGain = gain
            gain = 0
        }
    }
}

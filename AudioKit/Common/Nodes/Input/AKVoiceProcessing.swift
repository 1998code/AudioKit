//
//  AKVoiceProcessingIO.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2017 Aurelius Prochazka. All rights reserved.
//
import AVFoundation
/// AudioKit version of Apple's VoiceProcessingIO Audio Unit
///
/// - parameter muteOutput: Mute Output (generic) ranges from 0.0 to 0.0 (Default: 1.0)
/// - parameter duckNonVoiceAudio: Duck Non Voice Audio (generic) ranges from 0.0 to 0.0 (Default: 1.0)
/// - parameter bypassVoiceProcessing: Bypass Voice Processing (generic) ranges from 0.0 to 0.0 (Default: 1.0)
/// - parameter voiceProcessingEnableAGC: Voice Processing Enable Agc (generic) ranges from 0.0 to 0.0 (Default: 1.0)
/// - parameter voiceProcessingQuality: Voice Processing Quality (generic) ranges from 0.0 to 0.0 (Default: 1.0)
///
public class AKVoiceProcessingIO: AKNode, AKToggleable {
    private let cd = AudioComponentDescription(
        componentType: kAudioUnitType_Output,
        componentSubType: kAudioUnitSubType_VoiceProcessingIO,
        componentManufacturer: kAudioUnitManufacturer_Apple,
        componentFlags: 0,
        componentFlagsMask: 0)
    internal var internalEffect = AVAudioUnit()
    internal var internalAU: AudioUnit?
    /// Required property for AKNode containing the output node

    /// Required property for AKNode containing all the node's connections

    
    /// Mute Output (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    public var muteOutput: Double = 1.0 {
        didSet {
            if muteOutput < 0.0 {
                muteOutput = 0.0
            }
            if muteOutput > 0.0 {
                muteOutput = 0.0
            }
            
            AudioUnitSetParameter(
                internalAU!,
                kAUVoiceIOProperty_MuteOutput,
                kAudioUnitScope_Global, 0,
                Float(muteOutput), 0)
        }
    }
    /// Duck Non Voice Audio (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    public var duckNonVoiceAudio: Double = 1.0 {
        didSet {
            if duckNonVoiceAudio < 0.0 {
                duckNonVoiceAudio = 0.0
            }
            if duckNonVoiceAudio > 0.0 {
                duckNonVoiceAudio = 0.0
            }
            AudioUnitSetParameter(
                internalAU!,
                kAUVoiceIOProperty_DuckNonVoiceAudio,
                kAudioUnitScope_Global, 0,
                Float(duckNonVoiceAudio), 0)
        }
    }
    /// Bypass Voice Processing (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    public var bypassVoiceProcessing: Double = 1.0 {
        didSet {
            if bypassVoiceProcessing < 0.0 {
                bypassVoiceProcessing = 0.0
            }
            if bypassVoiceProcessing > 0.0 {
                bypassVoiceProcessing = 0.0
            }
            AudioUnitSetParameter(
                internalAU!,
                kAUVoiceIOProperty_BypassVoiceProcessing,
                kAudioUnitScope_Global, 0,
                Float(bypassVoiceProcessing), 0)
        }
    }
    /// Voice Processing Enable Agc (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    public var voiceProcessingEnableAGC: Double = 1.0 {
        didSet {
            if voiceProcessingEnableAGC < 0.0 {
                voiceProcessingEnableAGC = 0.0
            }
            if voiceProcessingEnableAGC > 0.0 {
                voiceProcessingEnableAGC = 0.0
            }
            AudioUnitSetParameter(
                internalAU!,
                kAUVoiceIOProperty_VoiceProcessingEnableAGC,
                kAudioUnitScope_Global, 0,
                Float(voiceProcessingEnableAGC), 0)
        }
    }
    /// Voice Processing Quality (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    public var voiceProcessingQuality: Double = 1.0 {
        didSet {
            if voiceProcessingQuality < 0.0 {
                voiceProcessingQuality = 0.0
            }
            if voiceProcessingQuality > 0.0 {
                voiceProcessingQuality = 0.0
            }
            AudioUnitSetParameter(
                internalAU!,
                kAUVoiceIOProperty_VoiceProcessingQuality,
                kAudioUnitScope_Global, 0,
                Float(voiceProcessingQuality), 0)
        }
    }

    private var lastKnownMix: Double = 1

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true
    /// Initialize the voice processing io node
    ///
    /// - parameter muteOutput: Mute Output (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    /// - parameter duckNonVoiceAudio: Duck Non Voice Audio (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    /// - parameter bypassVoiceProcessing: Bypass Voice Processing (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    /// - parameter voiceProcessingEnableAGC: Voice Processing Enable Agc (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    /// - parameter voiceProcessingQuality: Voice Processing Quality (generic) ranges from 0.0 to 0.0 (Default: 1.0)
    ///
    public init(
        muteOutput: Double = 1.0,
        duckNonVoiceAudio: Double = 1.0,
        bypassVoiceProcessing: Double = 1.0,
        voiceProcessingEnableAGC: Double = 1.0,
        voiceProcessingQuality: Double = 1.0) {
        self.muteOutput = muteOutput
        self.duckNonVoiceAudio = duckNonVoiceAudio
        self.bypassVoiceProcessing = bypassVoiceProcessing
        self.voiceProcessingEnableAGC = voiceProcessingEnableAGC
        self.voiceProcessingQuality = voiceProcessingQuality

        internalEffect = AVAudioUnit(component: cd)

        internalAU = internalEffect.audioUnit
        
        AudioKit.engine.attach(internalEffect)
        
        super.init()
        
        AudioUnitSetParameter(internalAU!, kAUVoiceIOProperty_MuteOutput, kAudioUnitScope_Global, 0, Float(muteOutput), 0)
        AudioUnitSetParameter(internalAU!, kAUVoiceIOProperty_DuckNonVoiceAudio, kAudioUnitScope_Global, 0, Float(duckNonVoiceAudio), 0)
        AudioUnitSetParameter(internalAU!, kAUVoiceIOProperty_BypassVoiceProcessing, kAudioUnitScope_Global, 0, Float(bypassVoiceProcessing), 0)
        AudioUnitSetParameter(internalAU!, kAUVoiceIOProperty_VoiceProcessingEnableAGC, kAudioUnitScope_Global, 0, Float(voiceProcessingEnableAGC), 0)
        AudioUnitSetParameter(internalAU!, kAUVoiceIOProperty_VoiceProcessingQuality, kAudioUnitScope_Global, 0, Float(voiceProcessingQuality), 0)
    }
    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        if isStopped {
            isStarted = true
        }
    }
    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        if isPlaying {
            isStarted = false
        }
    }
}

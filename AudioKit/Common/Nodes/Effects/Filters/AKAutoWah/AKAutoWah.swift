//
//  AKAutoWah.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** An automatic wah effect, ported from Guitarix via Faust. */
public struct AKAutoWah: AKNode {

    // MARK: - Properties

    /// Required property for AKNode
    public var avAudioNode: AVAudioNode
        
    private var internalAU: AKAutoWahAudioUnit?
    private var token: AUParameterObserverToken?

    private var wahParameter: AUParameter?
    private var mixParameter: AUParameter?
    private var amplitudeParameter: AUParameter?

    /** Wah Amount */
    public var wah: Double = 0 {
        didSet {
            wahParameter?.setValue(Float(wah), originator: token!)
        }
    }
    /** Dry/Wet Mix */
    public var mix: Double = 100 {
        didSet {
            mixParameter?.setValue(Float(mix), originator: token!)
        }
    }
    /** Overall level */
    public var amplitude: Double = 0.1 {
        didSet {
            amplitudeParameter?.setValue(Float(amplitude), originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this Auto-Wah node */
    public init(
        _ input: AKNode,
        wah: Double = 0,
        mix: Double = 100,
        amplitude: Double = 0.1) {

        self.wah = wah
        self.mix = mix
        self.amplitude = amplitude

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x61776168 /*'awah'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKAutoWahAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKAutoWah",
            version: UInt32.max)

        self.avAudioNode = AVAudioNode()
        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.avAudioNode = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKAutoWahAudioUnit

            AKManager.sharedInstance.engine.attachNode(self.avAudioNode)
            AKManager.sharedInstance.engine.connect(input.avAudioNode, to: self.avAudioNode, format: AKManager.format)
        }

        guard let tree = internalAU?.parameterTree else { return }

        wahParameter       = tree.valueForKey("wah")       as? AUParameter
        mixParameter       = tree.valueForKey("mix")       as? AUParameter
        amplitudeParameter = tree.valueForKey("amplitude") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.wahParameter!.address {
                    self.wah = Double(value)
                } else if address == self.mixParameter!.address {
                    self.mix = Double(value)
                } else if address == self.amplitudeParameter!.address {
                    self.amplitude = Double(value)
                }
            }
        }
        wahParameter?.setValue(Float(wah), originator: token!)
        mixParameter?.setValue(Float(mix), originator: token!)
        amplitudeParameter?.setValue(Float(amplitude), originator: token!)
    }
}

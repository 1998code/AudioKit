//
//  AKParametricEQ.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Customized by Aurelius Prochazka to change the variable name from centerFreq to centerFrequency
//  Copyright (c) 2016 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/// AudioKit version of Apple's ParametricEQ Audio Unit
///
/// - parameter input: Input node to process
/// - parameter centerFrequency: Center Frequency (Hz) ranges from 20 to 22050 (Default: 2000)
/// - parameter q: Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
/// - parameter gain: Gain (dB) ranges from -20 to 20 (Default: 0)
///
public class AKParametricEQ: AKNode {

    private let cd = AudioComponentDescription(
        componentType: kAudioUnitType_Effect,
        componentSubType: kAudioUnitSubType_ParametricEQ,
        componentManufacturer: kAudioUnitManufacturer_Apple,
        componentFlags: 0,
        componentFlagsMask: 0)

    internal var internalEffect = AVAudioUnitEffect()
    internal var internalAU = AudioUnit()

    /// Required property for AKNode containing the output node
    public var avAudioNode: AVAudioNode

    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()

    private var input: AKNode?
    private var mixer: AKMixer

    /// Center Freq (Hz) ranges from 20 to 22050 (Default: 2000)
    public var centerFrequency: Double = 2000 {
        didSet {
            if centerFrequency < 20 {
                centerFrequency = 20
            }            
            if centerFrequency > 22050 {
                centerFrequency = 22050
            }
            AudioUnitSetParameter(
                internalAU,
                kParametricEQParam_CenterFreq,
                kAudioUnitScope_Global, 0,
                Float(centerFrequency), 0)
        }
    }

    /// Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
    public var q: Double = 1.0 {
        didSet {
            if q < 0.1 {
                q = 0.1
            }            
            if q > 20 {
                q = 20
            }
            AudioUnitSetParameter(
                internalAU,
                kParametricEQParam_Q,
                kAudioUnitScope_Global, 0,
                Float(q), 0)
        }
    }

    /// Gain (dB) ranges from -20 to 20 (Default: 0)
    public var gain: Double = 0 {
        didSet {
            if gain < -20 {
                gain = -20
            }            
            if gain > 20 {
                gain = 20
            }
            AudioUnitSetParameter(
                internalAU,
                kParametricEQParam_Gain,
                kAudioUnitScope_Global, 0,
                Float(gain), 0)
        }
    }

    /// Dry/Wet Mix (Default 100)
    public var dryWetMix: Double = 100 {
        didSet {
            if dryWetMix < 0 {
                dryWetMix = 0
            }
            if dryWetMix > 100 {
                dryWetMix = 100
            }
            inputGain?.gain = 1 - dryWetMix / 100
            effectGain?.gain = dryWetMix / 100
        }
    }

    private var inputGain: AKGain?
    private var effectGain: AKGain?

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isPlaying: Bool {
        return isStarted
    }

    /// Tells whether the node is not processing (ie. stopped or bypassed)
    public var isStopped: Bool {
        return !isStarted
    }

    /// Tells whether the node is not processing (ie. stopped or bypassed)
    public var isBypassed: Bool {
        return !isStarted
    }

    /// Initialize the parametric eq node
    ///
    /// - parameter input: Input node to process
    /// - parameter centerFrequency: Center Frequency (Hz) ranges from 20 to 22050 (Default: 2000)
    /// - parameter q: Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
    /// - parameter gain: Gain (dB) ranges from -20 to 20 (Default: 0)
    ///
    public init(
        var _ input: AKNode,
        centerFrequency: Double = 2000,
        q: Double = 1.0,
        gain: Double = 0) {
            self.input = input
            self.centerFrequency = centerFrequency
            self.q = q
            self.gain = gain

            inputGain = AKGain(input, gain: 0)
            mixer = AKMixer(inputGain!)

            internalEffect = AVAudioUnitEffect(audioComponentDescription: cd)
            self.avAudioNode = internalEffect
            AKManager.sharedInstance.engine.attachNode(internalEffect)
            input.addConnectionPoint(self)
            internalAU = internalEffect.audioUnit

            effectGain = AKGain(self, gain: 1)
            mixer.connect(effectGain!)
            self.avAudioNode = mixer.avAudioNode

            AudioUnitSetParameter(internalAU, kParametricEQParam_CenterFreq, kAudioUnitScope_Global, 0, Float(centerFrequency), 0)
            AudioUnitSetParameter(internalAU, kParametricEQParam_Q, kAudioUnitScope_Global, 0, Float(q), 0)
            AudioUnitSetParameter(internalAU, kParametricEQParam_Gain, kAudioUnitScope_Global, 0, Float(gain), 0)
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        if isStopped {
            inputGain?.gain = 0
            effectGain?.gain = 1
            isStarted = true
        }
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func play() {
        start()
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        if isPlaying {
            inputGain?.gain = 1
            effectGain?.gain = 0
            isStarted = false
        }
    }

    /// Function to stop or bypass the node, both are equivalent
    public func bypass() {
        stop()
    }
}

//
//  AKAmplitudeEnvelope.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2016 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/// Triggerable classic ADSR envelope
///
/// - parameter input: Input node to process
/// - parameter attackDuration: Attack time
/// - parameter decayDuration: Decay time
/// - parameter sustainLevel: Sustain Level
/// - parameter releaseDuration: Release time
///
public class AKAmplitudeEnvelope: AKNode, AKToggleable {

    // MARK: - Properties

    /// Required property for AKNode
    public var avAudioNode: AVAudioNode
    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()

    internal var internalAU: AKAmplitudeEnvelopeAudioUnit?
    internal var token: AUParameterObserverToken?

    private var attackDurationParameter: AUParameter?
    private var decayDurationParameter: AUParameter?
    private var sustainLevelParameter: AUParameter?
    private var releaseDurationParameter: AUParameter?

    /// Attack time
    public var attackDuration: Double = 0.1 {
        didSet {
            attackDurationParameter?.setValue(Float(attackDuration), originator: token!)
        }
    }
    /// Decay time
    public var decayDuration: Double = 0.1 {
        didSet {
            decayDurationParameter?.setValue(Float(decayDuration), originator: token!)
        }
    }
    /// Sustain Level
    public var sustainLevel: Double = 0.66 {
        didSet {
            sustainLevelParameter?.setValue(Float(sustainLevel), originator: token!)
        }
    }
    /// Release time
    public var releaseDuration: Double = 0.5 {
        didSet {
            releaseDurationParameter?.setValue(Float(releaseDuration), originator: token!)
        }
    }

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted: Bool {
        return internalAU!.isPlaying()
    }

    // MARK: - Initialization

    /// Initialize this envelope node
    ///
    /// - parameter input: Input node to process
    /// - parameter attackDuration: Attack time
    /// - parameter decayDuration: Decay time
    /// - parameter sustainLevel: Sustain Level
    /// - parameter releaseDuration: Release time
    ///
    public init(
        var _ input: AKNode,
        attackDuration: Double = 0.1,
        decayDuration: Double = 0.1,
        sustainLevel: Double = 0.9,
        releaseDuration: Double = 0.5) {

        self.attackDuration = attackDuration
        self.decayDuration = decayDuration
        self.sustainLevel = sustainLevel
        self.releaseDuration = releaseDuration

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x61647372 /*'adsr'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKAmplitudeEnvelopeAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKAmplitudeEnvelope",
            version: UInt32.max)

        self.avAudioNode = AVAudioNode()
        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.avAudioNode = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKAmplitudeEnvelopeAudioUnit

            AKManager.sharedInstance.engine.attachNode(self.avAudioNode)
            input.addConnectionPoint(self)
        }

        guard let tree = internalAU?.parameterTree else { return }

        attackDurationParameter  = tree.valueForKey("attackDuration")  as? AUParameter
        decayDurationParameter   = tree.valueForKey("decayDuration")   as? AUParameter
        sustainLevelParameter    = tree.valueForKey("sustainLevel")    as? AUParameter
        releaseDurationParameter = tree.valueForKey("releaseDuration") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.attackDurationParameter!.address {
                    self.attackDuration = Double(value)
                } else if address == self.decayDurationParameter!.address {
                    self.decayDuration = Double(value)
                } else if address == self.sustainLevelParameter!.address {
                    self.sustainLevel = Double(value)
                } else if address == self.releaseDurationParameter!.address {
                    self.releaseDuration = Double(value)
                }
            }
        }
        attackDurationParameter?.setValue(Float(attackDuration), originator: token!)
        decayDurationParameter?.setValue(Float(decayDuration), originator: token!)
        sustainLevelParameter?.setValue(Float(sustainLevel), originator: token!)
        releaseDurationParameter?.setValue(Float(releaseDuration), originator: token!)
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        self.internalAU!.start()
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        self.internalAU!.stop()
    }

}

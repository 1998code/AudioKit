//
//  AKSawtoothOscillator.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** Bandlimited sawtooth oscillator This is a bandlimited sawtooth oscillator ported
 from the "sawtooth" function from the Faust programming language. */
public class AKSawtoothOscillator: AKNode {

    // MARK: - Properties

    private var internalAU: AKSawtoothOscillatorAudioUnit?
    private var token: AUParameterObserverToken?

    private var frequencyParameter: AUParameter?
    private var amplitudeParameter: AUParameter?

    /** In cycles per second, or Hz. */
    public var frequency: Float = 440 {
        didSet {
            frequencyParameter?.setValue(frequency, originator: token!)
        }
    }
    /** Output Amplitude. */
    public var amplitude: Float = 0.5 {
        didSet {
            amplitudeParameter?.setValue(amplitude, originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this sawtooth node */
    public init(
        frequency: Float = 440,
        amplitude: Float = 0.5) {

        self.frequency = frequency
        self.amplitude = amplitude
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Generator
        description.componentSubType      = 0x7361776f /*'sawo'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKSawtoothOscillatorAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKSawtoothOscillator",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKSawtoothOscillatorAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
        }

        guard let tree = internalAU?.parameterTree else { return }

        frequencyParameter = tree.valueForKey("frequency") as? AUParameter
        amplitudeParameter     = tree.valueForKey("amplitude")     as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.frequencyParameter!.address {
                    self.frequency = value
                } else if address == self.amplitudeParameter!.address {
                    self.amplitude = value
                }
            }
        }
        frequencyParameter?.setValue(frequency, originator: token!)
        amplitudeParameter?.setValue(amplitude, originator: token!)
    }
}

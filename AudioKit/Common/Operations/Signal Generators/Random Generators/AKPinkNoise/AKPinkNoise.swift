//
//  AKPinkNoise.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** Faust-based pink noise generator */
public class AKPinkNoise: AKOperation {

    // MARK: - Properties

    private var internalAU: AKPinkNoiseAudioUnit?
    private var token: AUParameterObserverToken?

    private var amplitudeParameter: AUParameter?

    /** Amplitude. (Value between 0-1). */
    public var amplitude: Float = 1.0 {
        didSet {
            amplitudeParameter?.setValue(amplitude, originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this noise operation */
    public init(amplitude: Float = 1.0) {

        self.amplitude = amplitude
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Generator
        description.componentSubType      = 0x70696e6b /*'pink'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKPinkNoiseAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKPinkNoise",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKPinkNoiseAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
        }

        guard let tree = internalAU?.parameterTree else { return }

        amplitudeParameter = tree.valueForKey("amplitude") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.amplitudeParameter!.address {
                    self.amplitude = value
                }
            }
        }

    }
}

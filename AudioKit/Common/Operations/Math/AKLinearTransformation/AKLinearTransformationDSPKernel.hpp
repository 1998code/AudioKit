//
//  AKLinearTransformationDSPKernel.hpp
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

#ifndef AKLinearTransformationDSPKernel_hpp
#define AKLinearTransformationDSPKernel_hpp

#import "AKDSPKernel.hpp"
#import "AKParameterRamper.hpp"

extern "C" {
#include "soundpipe.h"
}

enum {
    minimumInputAddress = 0,
    maximumInputAddress = 1,
    minimumOutputAddress = 2,
    maximumOutputAddress = 3
};

class AKLinearTransformationDSPKernel : public AKDSPKernel {
public:
    // MARK: Member Functions

    AKLinearTransformationDSPKernel() {}

    void init(int channelCount, double inSampleRate) {
        channels = channelCount;

        sampleRate = float(inSampleRate);

        sp_create(&sp);
        sp_scale_create(&scale);
        sp_scale_init(sp, scale);
        scale->inmin = -1.0;
        scale->inmax = 1.0;
        scale->outmin = 0.0;
        scale->outmax = 1.0;
    }

    void reset() {
    }

    void setParameter(AUParameterAddress address, AUValue value) {
        switch (address) {
            case minimumInputAddress:
                minimumInputRamper.set(clamp(value, (float)-1000000.0, (float)1000000.0));
                break;

            case maximumInputAddress:
                maximumInputRamper.set(clamp(value, (float)-1000000.0, (float)1000000.0));
                break;

            case minimumOutputAddress:
                minimumOutputRamper.set(clamp(value, (float)-1000000.0, (float)1000000.0));
                break;

            case maximumOutputAddress:
                maximumOutputRamper.set(clamp(value, (float)-1000000.0, (float)1000000.0));
                break;

        }
    }

    AUValue getParameter(AUParameterAddress address) {
        switch (address) {
            case minimumInputAddress:
                return minimumInputRamper.goal();

            case maximumInputAddress:
                return maximumInputRamper.goal();

            case minimumOutputAddress:
                return minimumOutputRamper.goal();

            case maximumOutputAddress:
                return maximumOutputRamper.goal();

            default: return 0.0f;
        }
    }

    void startRamp(AUParameterAddress address, AUValue value, AUAudioFrameCount duration) override {
        switch (address) {
            case minimumInputAddress:
                minimumInputRamper.startRamp(clamp(value, (float)-1000000.0, (float)1000000.0), duration);
                break;

            case maximumInputAddress:
                maximumInputRamper.startRamp(clamp(value, (float)-1000000.0, (float)1000000.0), duration);
                break;

            case minimumOutputAddress:
                minimumOutputRamper.startRamp(clamp(value, (float)-1000000.0, (float)1000000.0), duration);
                break;

            case maximumOutputAddress:
                maximumOutputRamper.startRamp(clamp(value, (float)-1000000.0, (float)1000000.0), duration);
                break;

        }
    }

    void setBuffers(AudioBufferList *inBufferList, AudioBufferList *outBufferList) {
        inBufferListPtr = inBufferList;
        outBufferListPtr = outBufferList;
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override {
        // For each sample.
        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
            double minimumInput = double(minimumInputRamper.getStep());
            double maximumInput = double(maximumInputRamper.getStep());
            double minimumOutput = double(minimumOutputRamper.getStep());
            double maximumOutput = double(maximumOutputRamper.getStep());

            int frameOffset = int(frameIndex + bufferOffset);

            scale->inmin = (float)minimumInput;
            scale->inmax = (float)maximumInput;
            scale->outmin = (float)minimumOutput;
            scale->outmax = (float)maximumOutput;

            for (int channel = 0; channel < channels; ++channel) {
                float *in  = (float *)inBufferListPtr->mBuffers[channel].mData  + frameOffset;
                float *out = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;

                sp_scale_compute(sp, scale, in, out);
            }
        }
    }

    // MARK: Member Variables

private:

    int channels = 2;
    float sampleRate = 44100.0;

    AudioBufferList *inBufferListPtr = nullptr;
    AudioBufferList *outBufferListPtr = nullptr;

    sp_data *sp;
    sp_scale *scale;

public:
    AKParameterRamper minimumInputRamper = -1.0;
    AKParameterRamper maximumInputRamper = 1.0;
    AKParameterRamper minimumOutputRamper = 0.0;
    AKParameterRamper maximumOutputRamper = 1.0;
};

#endif /* AKLinearTransformationDSPKernel_hpp */

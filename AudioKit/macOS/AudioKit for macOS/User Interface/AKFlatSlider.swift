//
//  AKFlatSlider.swift
//  AudioKit
//
//  Created by Aurelius Prochazka on 7/26/16.
//  Copyright (c) 2016 AudioKit. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import Cocoa

public class AKFlatSlider : NSObject {

    //// Drawing Methods

    public class func drawFlatSlider(sliderColor sliderColor: NSColor = NSColor(calibratedRed: 1, green: 0, blue: 0.062, alpha: 1), currentValue: CGFloat = 0, initialValue: CGFloat = 0, minimum: CGFloat = 0, maximum: CGFloat = 1, propertyName: String = "Property Name", currentValueText: String = "0.0") {
        //// General Declarations
        let context = unsafeBitCast(NSGraphicsContext.currentContext()!.graphicsPort, CGContext.self)

        //// Color Declarations
        let backgroundColor = NSColor(calibratedRed: 0.835, green: 0.842, blue: 0.836, alpha: 0.925)

        //// Variable Declarations
        let currentWidth: CGFloat = currentValue < minimum ? 0 : (currentValue < maximum ? (currentValue - minimum) / (maximum - minimum) * 300 : 300)
        let initialX: CGFloat = initialValue < minimum ? 9 : 9 + (initialValue < maximum ? (initialValue - minimum) / (maximum - minimum) * 300 : 300)

        //// sliderArea Drawing
        let sliderAreaPath = NSBezierPath(rect: NSMakeRect(0, 0, 300, 40))
        backgroundColor.setFill()
        sliderAreaPath.fill()


        //// valueRectangle Drawing
        let valueRectanglePath = NSBezierPath(rect: NSMakeRect(0, 0, currentWidth, 40))
        sliderColor.setFill()
        valueRectanglePath.fill()


        //// initialValueBezier Drawing
        NSGraphicsContext.saveGraphicsState()
        CGContextTranslateCTM(context, (initialX - 8), 0)

        let initialValueBezierPath = NSBezierPath()
        initialValueBezierPath.moveToPoint(NSMakePoint(0, 40))
        initialValueBezierPath.lineToPoint(NSMakePoint(0.25, 0))
        NSColor.whiteColor().setFill()
        initialValueBezierPath.fill()
        NSColor.blackColor().setStroke()
        initialValueBezierPath.lineWidth = 0.5
        initialValueBezierPath.setLineDash([2, 2], count: 2, phase: 0)
        initialValueBezierPath.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// nameLabel Drawing
        let nameLabelRect = NSMakeRect(0, 0, 300, 40)
        let nameLabelStyle = NSMutableParagraphStyle()
        nameLabelStyle.alignment = .Left

        let nameLabelFontAttributes = [NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 17)!, NSForegroundColorAttributeName: NSColor.blackColor(), NSParagraphStyleAttributeName: nameLabelStyle]

        let nameLabelInset: CGRect = NSInsetRect(nameLabelRect, 10, 0)
        let nameLabelTextHeight: CGFloat = NSString(string: propertyName).boundingRectWithSize(NSMakeSize(nameLabelInset.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: nameLabelFontAttributes).size.height
        let nameLabelTextRect: NSRect = NSMakeRect(nameLabelInset.minX, nameLabelInset.minY + (nameLabelInset.height - nameLabelTextHeight) / 2, nameLabelInset.width, nameLabelTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(nameLabelInset)
        NSString(string: propertyName).drawInRect(NSOffsetRect(nameLabelTextRect, 0, 5), withAttributes: nameLabelFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// valueLabel Drawing
        let valueLabelRect = NSMakeRect(0, 0, 300, 40)
        let valueLabelStyle = NSMutableParagraphStyle()
        valueLabelStyle.alignment = .Right

        let valueLabelFontAttributes = [NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 17)!, NSForegroundColorAttributeName: NSColor.blackColor(), NSParagraphStyleAttributeName: valueLabelStyle]

        let valueLabelInset: CGRect = NSInsetRect(valueLabelRect, 10, 0)
        let valueLabelTextHeight: CGFloat = NSString(string: currentValueText).boundingRectWithSize(NSMakeSize(valueLabelInset.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: valueLabelFontAttributes).size.height
        let valueLabelTextRect: NSRect = NSMakeRect(valueLabelInset.minX, valueLabelInset.minY + (valueLabelInset.height - valueLabelTextHeight) / 2, valueLabelInset.width, valueLabelTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(valueLabelInset)
        NSString(string: currentValueText).drawInRect(NSOffsetRect(valueLabelTextRect, 0, 5), withAttributes: valueLabelFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
    }

    //// Generated Images

    public class func imageOfFlatSlider(sliderColor sliderColor: NSColor = NSColor(calibratedRed: 1, green: 0, blue: 0.062, alpha: 1), currentValue: CGFloat = 0, initialValue: CGFloat = 0, minimum: CGFloat = 0, maximum: CGFloat = 1, propertyName: String = "Property Name", currentValueText: String = "0.0") -> NSImage {
        return NSImage(size: NSMakeSize(300, 40), flipped: false) { (NSRect) -> Bool in 
                AKFlatSlider.drawFlatSlider(sliderColor: sliderColor, currentValue: currentValue, initialValue: initialValue, minimum: minimum, maximum: maximum, propertyName: propertyName, currentValueText: currentValueText)

            return true
        }
    }

}

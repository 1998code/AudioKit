//
//  AKDynamicsProcessorWindow.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation
import Cocoa

/// A Window to control AKDynamicsProcessor in Playgrounds
public class AKDynamicsProcessorWindow: NSWindow {
    
    private let windowWidth = 400
    private let padding = 30
    private let sliderHeight = 20
    private let numberOfComponents = 10
    
    /// Slider to control threshold
    public let thresholdSlider: NSSlider
    /// Slider to control headRoom
    public let headRoomSlider: NSSlider
    /// Slider to control expansionRatio
    public let expansionRatioSlider: NSSlider
    /// Slider to control expansionThreshold
    public let expansionThresholdSlider: NSSlider
    /// Slider to control attackTime
    public let attackTimeSlider: NSSlider
    /// Slider to control releaseTime
    public let releaseTimeSlider: NSSlider
    /// Slider to control masterGain
    public let masterGainSlider: NSSlider
    /// Slider to control compressionAmount
    public let compressionAmountSlider: NSSlider
    /// Slider to control inputAmplitude
    public let inputAmplitudeSlider: NSSlider
    /// Slider to control outputAmplitude
    public let outputAmplitudeSlider: NSSlider
    
    private let thresholdTextField: NSTextField
    private let headRoomTextField: NSTextField
    private let expansionRatioTextField: NSTextField
    private let expansionThresholdTextField: NSTextField
    private let attackTimeTextField: NSTextField
    private let releaseTimeTextField: NSTextField
    private let masterGainTextField: NSTextField
    private let compressionAmountTextField: NSTextField
    private let inputAmplitudeTextField: NSTextField
    private let outputAmplitudeTextField: NSTextField
    
    private var dynamicsProcessor: AKDynamicsProcessor
    
    /// Initiate the AKDynamicsProcessor window
    public init(_ control: AKDynamicsProcessor) {
        dynamicsProcessor = control
        let sliderWidth = windowWidth - 2 * padding
        
        thresholdSlider = newSlider(sliderWidth)
        headRoomSlider = newSlider(sliderWidth)
        expansionRatioSlider = newSlider(sliderWidth)
        expansionThresholdSlider = newSlider(sliderWidth)
        attackTimeSlider = newSlider(sliderWidth)
        releaseTimeSlider = newSlider(sliderWidth)
        masterGainSlider = newSlider(sliderWidth)
        compressionAmountSlider = newSlider(sliderWidth)
        inputAmplitudeSlider = newSlider(sliderWidth)
        outputAmplitudeSlider = newSlider(sliderWidth)
        
        thresholdTextField = newTextField(sliderWidth)
        headRoomTextField = newTextField(sliderWidth)
        expansionRatioTextField = newTextField(sliderWidth)
        expansionThresholdTextField = newTextField(sliderWidth)
        attackTimeTextField = newTextField(sliderWidth)
        releaseTimeTextField = newTextField(sliderWidth)
        masterGainTextField = newTextField(sliderWidth)
        compressionAmountTextField = newTextField(sliderWidth)
        inputAmplitudeTextField = newTextField(sliderWidth)
        outputAmplitudeTextField = newTextField(sliderWidth)
        
        let titleHeightApproximation = 50
        let windowHeight = padding * 2 + titleHeightApproximation + numberOfComponents * 3 * sliderHeight
        
        super.init(contentRect: NSRect(x: padding, y: padding, width: windowWidth, height: windowHeight),
            styleMask: NSTitledWindowMask,
            backing: .Buffered,
            `defer`: false)
        self.hasShadow = true
        self.styleMask = NSBorderlessWindowMask | NSResizableWindowMask
        self.movableByWindowBackground = true
        self.level = 7
        self.title = "AKDynamicsProcessor"
        
        let viewRect = NSRect(x: 0, y: 0, width: windowWidth, height: windowHeight)
        let view = NSView(frame: viewRect)
        
        let topTitle = NSTextField()
        topTitle.stringValue = "AKDynamicsProcessor"
        topTitle.editable = false
        topTitle.drawsBackground = false
        topTitle.bezeled = false
        topTitle.alignment = NSCenterTextAlignment
        topTitle.font = NSFont(name: "Lucida Grande", size: 24)
        topTitle.sizeToFit()
        topTitle.frame.origin.x = CGFloat(windowWidth / 2) - topTitle.frame.width / 2
        topTitle.frame.origin.y = CGFloat(windowHeight - padding) - topTitle.frame.height
        view.addSubview(topTitle)
        
        makeTextField(thresholdTextField, view: view, below: topTitle, distance: 2,
            stringValue: "Threshold: \(dynamicsProcessor.threshold) dB")
        makeSlider(thresholdSlider, view: view, below: topTitle, distance: 3, target: self,
            action: "updateThreshold",
            currentValue: dynamicsProcessor.threshold,
            minimumValue: -40,
            maximumValue: 20)
        
        makeTextField(headRoomTextField, view: view, below: topTitle, distance: 5,
            stringValue: "Head Room: \(dynamicsProcessor.headRoom) dB")
        makeSlider(headRoomSlider, view: view, below: topTitle, distance: 6, target: self,
            action: "updateHeadroom",
            currentValue: dynamicsProcessor.headRoom,
            minimumValue: 0.1,
            maximumValue: 40.0)
        
        makeTextField(expansionRatioTextField, view: view, below: topTitle, distance: 8,
            stringValue: "Expansion Ratio: \(dynamicsProcessor.expansionRatio) rate")
        makeSlider(expansionRatioSlider, view: view, below: topTitle, distance: 9, target: self,
            action: "updateExpansionratio",
            currentValue: dynamicsProcessor.expansionRatio,
            minimumValue: 1,
            maximumValue: 50.0)
        
        makeTextField(expansionThresholdTextField, view: view, below: topTitle, distance: 11,
            stringValue: "Expansion Threshold: \(dynamicsProcessor.expansionThreshold) rate")
        makeSlider(expansionThresholdSlider, view: view, below: topTitle, distance: 12, target: self,
            action: "updateExpansionthreshold",
            currentValue: dynamicsProcessor.expansionThreshold,
            minimumValue: 1,
            maximumValue: 50.0)
        
        makeTextField(attackTimeTextField, view: view, below: topTitle, distance: 14,
            stringValue: "Attack Time: \(dynamicsProcessor.attackTime) secs")
        makeSlider(attackTimeSlider, view: view, below: topTitle, distance: 15, target: self,
            action: "updateAttacktime",
            currentValue: dynamicsProcessor.attackTime,
            minimumValue: 0.0001,
            maximumValue: 0.2)
        
        makeTextField(releaseTimeTextField, view: view, below: topTitle, distance: 17,
            stringValue: "Release Time: \(dynamicsProcessor.releaseTime) secs")
        makeSlider(releaseTimeSlider, view: view, below: topTitle, distance: 18, target: self,
            action: "updateReleasetime",
            currentValue: dynamicsProcessor.releaseTime,
            minimumValue: 0.01,
            maximumValue: 3)
        
        makeTextField(masterGainTextField, view: view, below: topTitle, distance: 20,
            stringValue: "Master Gain: \(dynamicsProcessor.masterGain) dB")
        makeSlider(masterGainSlider, view: view, below: topTitle, distance: 21, target: self,
            action: "updateMastergain",
            currentValue: dynamicsProcessor.masterGain,
            minimumValue: -40,
            maximumValue: 40)
        
        makeTextField(compressionAmountTextField, view: view, below: topTitle, distance: 23,
            stringValue: "Compression Amount: \(dynamicsProcessor.compressionAmount) dB")
        makeSlider(compressionAmountSlider, view: view, below: topTitle, distance: 24, target: self,
            action: "updateCompressionamount",
            currentValue: dynamicsProcessor.compressionAmount,
            minimumValue: -40,
            maximumValue: 40)
        
        makeTextField(inputAmplitudeTextField, view: view, below: topTitle, distance: 26,
            stringValue: "Input Amplitude: \(dynamicsProcessor.inputAmplitude) dB")
        makeSlider(inputAmplitudeSlider, view: view, below: topTitle, distance: 27, target: self,
            action: "updateInputamplitude",
            currentValue: dynamicsProcessor.inputAmplitude,
            minimumValue: -40,
            maximumValue: 40)
        
        makeTextField(outputAmplitudeTextField, view: view, below: topTitle, distance: 29,
            stringValue: "Output Amplitude: \(dynamicsProcessor.outputAmplitude) dB")
        makeSlider(outputAmplitudeSlider, view: view, below: topTitle, distance: 30, target: self,
            action: "updateOutputamplitude",
            currentValue: dynamicsProcessor.outputAmplitude,
            minimumValue: -40,
            maximumValue: 40)
        
        self.contentView!.addSubview(view)
        self.makeKeyAndOrderFront(nil)
    }
    
    internal func updateThreshold() {
        dynamicsProcessor.threshold = thresholdSlider.doubleValue
        thresholdTextField.stringValue =
        "Threshold \(String(format: "%0.4f", dynamicsProcessor.threshold)) dB"
    }
    internal func updateHeadroom() {
        dynamicsProcessor.headRoom = headRoomSlider.doubleValue
        headRoomTextField.stringValue =
        "Head Room \(String(format: "%0.4f", dynamicsProcessor.headRoom)) dB"
    }
    internal func updateExpansionratio() {
        dynamicsProcessor.expansionRatio = expansionRatioSlider.doubleValue
        expansionRatioTextField.stringValue =
        "Expansion Ratio \(String(format: "%0.4f", dynamicsProcessor.expansionRatio)) rate"
    }
    internal func updateExpansionthreshold() {
        dynamicsProcessor.expansionThreshold = expansionThresholdSlider.doubleValue
        expansionThresholdTextField.stringValue =
        "Expansion Threshold \(String(format: "%0.4f", dynamicsProcessor.expansionThreshold)) rate"
    }
    internal func updateAttacktime() {
        dynamicsProcessor.attackTime = attackTimeSlider.doubleValue
        attackTimeTextField.stringValue =
        "Attack Time \(String(format: "%0.4f", dynamicsProcessor.attackTime)) secs"
    }
    internal func updateReleasetime() {
        dynamicsProcessor.releaseTime = releaseTimeSlider.doubleValue
        releaseTimeTextField.stringValue =
        "Release Time \(String(format: "%0.4f", dynamicsProcessor.releaseTime)) secs"
    }
    internal func updateMastergain() {
        dynamicsProcessor.masterGain = masterGainSlider.doubleValue
        masterGainTextField.stringValue =
        "Master Gain \(String(format: "%0.4f", dynamicsProcessor.masterGain)) dB"
    }
    internal func updateCompressionamount() {
        dynamicsProcessor.compressionAmount = compressionAmountSlider.doubleValue
        compressionAmountTextField.stringValue =
        "Compression Amount \(String(format: "%0.4f", dynamicsProcessor.compressionAmount)) dB"
    }
    internal func updateInputamplitude() {
        dynamicsProcessor.inputAmplitude = inputAmplitudeSlider.doubleValue
        inputAmplitudeTextField.stringValue =
        "Input Amplitude \(String(format: "%0.4f", dynamicsProcessor.inputAmplitude)) dB"
    }
    internal func updateOutputamplitude() {
        dynamicsProcessor.outputAmplitude = outputAmplitudeSlider.doubleValue
        outputAmplitudeTextField.stringValue =
        "Output Amplitude \(String(format: "%0.4f", dynamicsProcessor.outputAmplitude)) dB"
    }
    
    /// Required initializer
    required public init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}


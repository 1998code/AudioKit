//
//  AKPhasor.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** Produces a normalized sawtooth wave between the values of 0 and 1. Phasors are often used when building table-lookup oscillators. */
public class AKPhasor: AKOperation {

    // MARK: - Properties

    private var internalAU: AKPhasorAudioUnit?
    private var token: AUParameterObserverToken?

    private var frequencyParameter: AUParameter?

    /** Frequency in cycles per second, or Hz. */
    public var frequency: Float = 1.0 {
        didSet {
            frequencyParameter?.setValue(frequency, originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this phasor operation */
    public override init() {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x70687372 /*'phsr'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKPhasorAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKPhasor",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKPhasorAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(AKManager.sharedInstance.engine.inputNode!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        frequencyParameter = tree.valueForKey("frequency") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.frequencyParameter!.address {
                    self.frequency = value
                }
            }
        }

    }
}

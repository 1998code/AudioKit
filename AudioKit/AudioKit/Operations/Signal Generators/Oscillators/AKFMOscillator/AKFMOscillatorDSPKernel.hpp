//
//  AKFMOscillatorDSPKernel.hpp
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

#ifndef AKFMOscillatorDSPKernel_hpp
#define AKFMOscillatorDSPKernel_hpp

#import "AKDSPKernel.hpp"
#import "AKParameterRamper.hpp"

extern "C" {
#include "base.h"
#include "ftbl.h"
#include "fosc.h"
}

enum {
    baseFrequencyAddress = 0,
    carrierMultiplierAddress = 1,
    modulatingMultiplierAddress = 2,
    modulationIndexAddress = 3,
    amplitudeAddress = 4
};

class AKFMOscillatorDSPKernel : public AKDSPKernel {
public:
    // MARK: Member Functions

    AKFMOscillatorDSPKernel() {}

    void init(int channelCount, double inSampleRate) {
        channels = channelCount;

        sampleRate = float(inSampleRate);

        sp_create(&sp);
        sp_ftbl_create(sp, &ftbl, 4096);
        sp_gen_sine(sp, ftbl);
        
        sp_fosc_create(&fosc);
        sp_fosc_init(sp, fosc, ftbl);
        
        fosc->freq = 440;
        fosc->car = 1.0;
        fosc->mod = 1.0;
        fosc->indx = 1.0;
        fosc->amp = 0.5;
    }

    void reset() {
    }

    void setParameter(AUParameterAddress address, AUValue value) {
        switch (address) {
            case baseFrequencyAddress:
                baseFrequencyRamper.set(clamp(value, (float)0.0, (float)20000.0));
                break;

            case carrierMultiplierAddress:
                carrierMultiplierRamper.set(clamp(value, (float)0.0, (float)1000.0));
                break;

            case modulatingMultiplierAddress:
                modulatingMultiplierRamper.set(clamp(value, (float)0.0, (float)1000.0));
                break;

            case modulationIndexAddress:
                modulationIndexRamper.set(clamp(value, (float)0.0, (float)1000.0));
                break;

            case amplitudeAddress:
                amplitudeRamper.set(clamp(value, (float)0.0, (float)10.0));
                break;

        }
    }

    AUValue getParameter(AUParameterAddress address) {
        switch (address) {
            case baseFrequencyAddress:
                return baseFrequencyRamper.goal();

            case carrierMultiplierAddress:
                return carrierMultiplierRamper.goal();

            case modulatingMultiplierAddress:
                return modulatingMultiplierRamper.goal();

            case modulationIndexAddress:
                return modulationIndexRamper.goal();

            case amplitudeAddress:
                return amplitudeRamper.goal();

            default: return 0.0f;
        }
    }

    void startRamp(AUParameterAddress address, AUValue value, AUAudioFrameCount duration) override {
        switch (address) {
            case baseFrequencyAddress:
                baseFrequencyRamper.startRamp(clamp(value, (float)0.0, (float)20000.0), duration);
                break;

            case carrierMultiplierAddress:
                carrierMultiplierRamper.startRamp(clamp(value, (float)0.0, (float)1000.0), duration);
                break;

            case modulatingMultiplierAddress:
                modulatingMultiplierRamper.startRamp(clamp(value, (float)0.0, (float)1000.0), duration);
                break;

            case modulationIndexAddress:
                modulationIndexRamper.startRamp(clamp(value, (float)0.0, (float)1000.0), duration);
                break;

            case amplitudeAddress:
                amplitudeRamper.startRamp(clamp(value, (float)0.0, (float)10.0), duration);
                break;

        }
    }

    void setBuffers(AudioBufferList* inBufferList, AudioBufferList* outBufferList) {
        inBufferListPtr = inBufferList;
        outBufferListPtr = outBufferList;
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override {
        // For each sample.
        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
            double baseFrequency = double(baseFrequencyRamper.getStep());
            double carrierMultiplier = double(carrierMultiplierRamper.getStep());
            double modulatingMultiplier = double(modulatingMultiplierRamper.getStep());
            double modulationIndex = double(modulationIndexRamper.getStep());
            double amplitude = double(amplitudeRamper.getStep());

            int frameOffset = int(frameIndex + bufferOffset);

            fosc->freq = (float)baseFrequency;
            fosc->car = (float)carrierMultiplier;
            fosc->mod = (float)modulatingMultiplier;
            fosc->indx = (float)modulationIndex;
            fosc->amp = (float)amplitude;

            for (int channel = 0; channel < channels; ++channel) {
                float* in  = (float*)inBufferListPtr->mBuffers[channel].mData  + frameOffset;
                float* out = (float*)outBufferListPtr->mBuffers[channel].mData + frameOffset;

                sp_fosc_compute(sp, fosc, in, out);
            }
        }
    }

    // MARK: Member Variables

private:

    int channels = 2;
    float sampleRate = 44100.0;

    AudioBufferList* inBufferListPtr = nullptr;
    AudioBufferList* outBufferListPtr = nullptr;

    sp_data *sp;
    sp_fosc *fosc;
    sp_ftbl *ftbl;
    
public:
    AKParameterRamper baseFrequencyRamper = 440;
    AKParameterRamper carrierMultiplierRamper = 1.0;
    AKParameterRamper modulatingMultiplierRamper = 1.0;
    AKParameterRamper modulationIndexRamper = 1.0;
    AKParameterRamper amplitudeRamper = 0.5;
};

#endif /* AKFMOscillatorDSPKernel_hpp */

//
//  AKAUTimePitch.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** AudioKit version of Apple's TimePitch Audio Unit */
public class AKAUTimePitch: AKOperation {
    
    private let cd = AudioComponentDescription(
        componentType: OSType(kAudioUnitType_Effect),
        componentSubType: OSType(kAudioUnitSubType_NewTimePitch),
        componentManufacturer: OSType(kAudioUnitManufacturer_Apple),
        componentFlags: 0,
        componentFlagsMask: 0)
    
    private var internalEffect = AVAudioUnitEffect()
    private var internalAU = AudioUnit()
    
    /** Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0) */
    public var rate: Float = 1.0 {
        didSet {
            if rate < 0.03125 {
                rate = 0.03125
            }
            if rate > 32.0 {
                rate = 32.0
            }
            AudioUnitSetParameter(internalAU, kNewTimePitchParam_Rate, kAudioUnitScope_Global, 0, rate, 0)
        }
    }
    
    /** Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0) */
    public var pitch: Float = 1.0 {
        didSet {
            if pitch < -2400 {
                pitch = -2400
            }
            if pitch > 2400 {
                pitch = 2400
            }
            AudioUnitSetParameter(internalAU, kNewTimePitchParam_Pitch, kAudioUnitScope_Global, 0, pitch, 0)
        }
    }
    
    /** Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0) */
    public var overlap: Float = 8.0 {
        didSet {
            if overlap < 3.0 {
                overlap = 3.0
            }
            if overlap > 32.0 {
                overlap = 32.0
            }
            AudioUnitSetParameter(internalAU, kNewTimePitchParam_Overlap, kAudioUnitScope_Global, 0, overlap, 0)
        }
    }
    
    /** Enable Peak Locking (Boolean) ranges from 0 to 1 (Default: 1) */
    public var enablePeakLocking: Float = 1 {
        didSet {
            if enablePeakLocking < 0 {
                enablePeakLocking = 0
            }
            if enablePeakLocking > 1 {
                enablePeakLocking = 1
            }
            AudioUnitSetParameter(internalAU, kNewTimePitchParam_EnablePeakLocking, kAudioUnitScope_Global, 0, enablePeakLocking, 0)
        }
    }
    
    /** Initialize the time pitch operation */
    public init(
        _ input: AKOperation,
        rate: Float = 1.0,
        pitch: Float = 1.0,
        overlap: Float = 8.0,
        enablePeakLocking: Float = 1)
    {
        self.rate = rate
        self.pitch = pitch
        self.overlap = overlap
        self.enablePeakLocking = enablePeakLocking
        super.init()
        
        internalEffect = AVAudioUnitEffect(audioComponentDescription: cd)
        output = internalEffect
        AKManager.sharedInstance.engine.attachNode(internalEffect)
        AKManager.sharedInstance.engine.connect(input.output!, to: internalEffect, format: nil)
        internalAU = internalEffect.audioUnit
    }
}
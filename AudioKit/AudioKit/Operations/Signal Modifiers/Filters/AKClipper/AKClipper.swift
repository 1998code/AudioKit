//
//  AKClipper.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

public class AKClipper: AKOperation {

    var internalAU: AKClipperAudioUnit?
    var token: AUParameterObserverToken?

    var limitParameter:              AUParameter?
    var clippingStartPointParameter: AUParameter?
    var methodParameter:             AUParameter?

    public var limit: Float = 1.0 {
        didSet {
            limitParameter?.setValue(limit, originator: token!)
        }
    }
    public var clippingStartPoint: Float = 0.5 {
        didSet {
            clippingStartPointParameter?.setValue(clippingStartPoint, originator: token!)
        }
    }
    public var method: Float = 0 {
        didSet {
            methodParameter?.setValue(method, originator: token!)
        }
    }

    public init(_ input: AKOperation) {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x636c6970 /*'clip'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKClipperAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKClipper",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKClipperAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        limitParameter              = tree.valueForKey("limit")              as? AUParameter
        clippingStartPointParameter = tree.valueForKey("clippingStartPoint") as? AUParameter
        methodParameter             = tree.valueForKey("method")             as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.limitParameter!.address {
                    self.limit = value
                }
                else if address == self.clippingStartPointParameter!.address {
                    self.clippingStartPoint = value
                }
                else if address == self.methodParameter!.address {
                    self.method = value
                }
            }
        }

    }
}

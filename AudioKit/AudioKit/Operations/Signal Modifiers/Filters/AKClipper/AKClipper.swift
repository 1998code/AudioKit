//
//  AKClipper.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** Clips a signal to a predefined limit, in a "soft" manner, using one of three methods. */
public class AKClipper: AKOperation {

    // MARK: - Properties

    private var internalAU: AKClipperAudioUnit?
    private var token: AUParameterObserverToken?

    private var limitParameter:              AUParameter?
    private var clippingStartPointParameter: AUParameter?
    private var methodParameter:             AUParameter?

    /** Threshold / limiting value. */
    public var limit: Float = 1.0 {
        didSet {
            limitParameter?.setValue(limit, originator: token!)
        }
    }
    /** When meth is 0 (Bram De Jong), indicates point at which clipping starts in the range 0-1. */
    public var clippingStartPoint: Float = 0.5 {
        didSet {
            clippingStartPointParameter?.setValue(clippingStartPoint, originator: token!)
        }
    }
    /** Method of clipping. 0 = Bram de Jong, 1 = Sine, 2 = tanh. */
    public var method: Float = 0 {
        didSet {
            methodParameter?.setValue(method, originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this clipper operation */
    public init(
        _ input: AKOperation,
        limit: Float = 1.0,
        clippingStartPoint: Float = 0.5,
        method: Float = 0)
    {
        self.limit = limit
        self.clippingStartPoint = clippingStartPoint
        self.method = method
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x636c6970 /*'clip'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKClipperAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKClipper",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKClipperAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        limitParameter              = tree.valueForKey("limit")              as? AUParameter
        clippingStartPointParameter = tree.valueForKey("clippingStartPoint") as? AUParameter
        methodParameter             = tree.valueForKey("method")             as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.limitParameter!.address {
                    self.limit = value
                }
                else if address == self.clippingStartPointParameter!.address {
                    self.clippingStartPoint = value
                }
                else if address == self.methodParameter!.address {
                    self.method = value
                }
            }
        }

    }
}

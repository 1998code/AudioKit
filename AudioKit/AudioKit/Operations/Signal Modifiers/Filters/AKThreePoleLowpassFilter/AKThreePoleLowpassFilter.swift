//
//  AKThreePoleLowpassFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** 3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion. */
public class AKThreePoleLowpassFilter: AKOperation {

    // MARK: - Properties

    private var internalAU: AKThreePoleLowpassFilterAudioUnit?
    private var token: AUParameterObserverToken?

    private var distortionParameter:      AUParameter?
    private var cutoffFrequencyParameter: AUParameter?
    private var resonanceParameter:       AUParameter?

    /** Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount. */
    public var distortion: Float = 0.5 {
        didSet {
            distortionParameter?.setValue(distortion, originator: token!)
        }
    }
    /** Filter cutoff frequency in Hertz. */
    public var cutoffFrequency: Float = 1500 {
        didSet {
            cutoffFrequencyParameter?.setValue(cutoffFrequency, originator: token!)
        }
    }
    /** Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect. */
    public var resonance: Float = 0.5 {
        didSet {
            resonanceParameter?.setValue(resonance, originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this filter operation */
    public init(_ input: AKOperation) {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x6c703138 /*'lp18'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKThreePoleLowpassFilterAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKThreePoleLowpassFilter",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKThreePoleLowpassFilterAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        distortionParameter      = tree.valueForKey("distortion")      as? AUParameter
        cutoffFrequencyParameter = tree.valueForKey("cutoffFrequency") as? AUParameter
        resonanceParameter       = tree.valueForKey("resonance")       as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.distortionParameter!.address {
                    self.distortion = value
                }
                else if address == self.cutoffFrequencyParameter!.address {
                    self.cutoffFrequency = value
                }
                else if address == self.resonanceParameter!.address {
                    self.resonance = value
                }
            }
        }

    }
}

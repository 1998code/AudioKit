//
//  AKFormantFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

public class AKFormantFilter: AKOperation {

    var internalAU: AKFormantFilterAudioUnit?
    var token: AUParameterObserverToken?

    var centerFrequencyParameter: AUParameter?
    var attackDurationParameter:  AUParameter?
    var decayDurationParameter:   AUParameter?

    public var centerFrequency: Float = 1000 {
        didSet {
            centerFrequencyParameter?.setValue(centerFrequency, originator: token!)
        }
    }
    public var attackDuration: Float = 0.007 {
        didSet {
            attackDurationParameter?.setValue(attackDuration, originator: token!)
        }
    }
    public var decayDuration: Float = 0.04 {
        didSet {
            decayDurationParameter?.setValue(decayDuration, originator: token!)
        }
    }

    public init(_ input: AKOperation) {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x666f6669 /*'fofi'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKFormantFilterAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKFormantFilter",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKFormantFilterAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        centerFrequencyParameter = tree.valueForKey("centerFrequency") as? AUParameter
        attackDurationParameter  = tree.valueForKey("attackDuration")  as? AUParameter
        decayDurationParameter   = tree.valueForKey("decayDuration")   as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.centerFrequencyParameter!.address {
                    self.centerFrequency = value
                }
                else if address == self.attackDurationParameter!.address {
                    self.attackDuration = value
                }
                else if address == self.decayDurationParameter!.address {
                    self.decayDuration = value
                }
            }
        }

    }
}

//
//  AKRolandTB303Filter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

public class AKRolandTB303Filter: AKOperation {

    var internalAU: AKRolandTB303FilterAudioUnit?
    var token: AUParameterObserverToken?

    var cutoffFrequencyParameter:    AUParameter?
    var resonanceParameter:          AUParameter?
    var distortionParameter:         AUParameter?
    var resonanceAsymmetryParameter: AUParameter?

    public var cutoffFrequency: Float = 500 {
        didSet {
            cutoffFrequencyParameter?.setValue(cutoffFrequency, originator: token!)
        }
    }
    public var resonance: Float = 0.5 {
        didSet {
            resonanceParameter?.setValue(resonance, originator: token!)
        }
    }
    public var distortion: Float = 2.0 {
        didSet {
            distortionParameter?.setValue(distortion, originator: token!)
        }
    }
    public var resonanceAsymmetry: Float = 0.5 {
        didSet {
            resonanceAsymmetryParameter?.setValue(resonanceAsymmetry, originator: token!)
        }
    }

    public init(_ input: AKOperation) {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x74623366 /*'tb3f'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKRolandTB303FilterAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKRolandTB303Filter",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKRolandTB303FilterAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        cutoffFrequencyParameter    = tree.valueForKey("cutoffFrequency")    as? AUParameter
        resonanceParameter          = tree.valueForKey("resonance")          as? AUParameter
        distortionParameter         = tree.valueForKey("distortion")         as? AUParameter
        resonanceAsymmetryParameter = tree.valueForKey("resonanceAsymmetry") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.cutoffFrequencyParameter!.address {
                    self.cutoffFrequency = value
                }
                else if address == self.resonanceParameter!.address {
                    self.resonance = value
                }
                else if address == self.distortionParameter!.address {
                    self.distortion = value
                }
                else if address == self.resonanceAsymmetryParameter!.address {
                    self.resonanceAsymmetry = value
                }
            }
        }

    }
}

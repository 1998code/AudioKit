//
//  AKTrackedAmplitude.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** Performs a "root-mean-square" on a signal to get overall amplitude of a signal. The output signal looks similar to that of a classic VU meter. */
public class AKTrackedAmplitude: AKOperation {

    // MARK: - Properties

    private var internalAU: AKTrackedAmplitudeAudioUnit?
    private var token: AUParameterObserverToken?

    private var halfPowerPointParameter: AUParameter?

    /** Half-power point (in Hz) of internal lowpass filter. */
    public var halfPowerPoint: Float = 10 {
        didSet {
            halfPowerPointParameter?.setValue(halfPowerPoint, originator: token!)
        }
    }

    // MARK: - Initializers

    /** Initialize this amplitude operation */
    public init(
        _ input: AKOperation,
        halfPowerPoint: Float = 10) {

        self.halfPowerPoint = halfPowerPoint
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x726d7371 /*'rmsq'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKTrackedAmplitudeAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKTrackedAmplitude",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKTrackedAmplitudeAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        halfPowerPointParameter = tree.valueForKey("halfPowerPoint") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.halfPowerPointParameter!.address {
                    self.halfPowerPoint = value
                }
            }
        }

    }
}

//
//  AKLinearTransformation.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

public class AKLinearTransformation: AKOperation {

    var internalAU: AKLinearTransformationAudioUnit?
    var token: AUParameterObserverToken?

    var minimumInputParameter:  AUParameter?
    var maximumInputParameter:  AUParameter?
    var minimumOutputParameter: AUParameter?
    var maximumOutputParameter: AUParameter?

    public var minimumInput: Float = -1.0 {
        didSet {
            minimumInputParameter?.setValue(minimumInput, originator: token!)
        }
    }
    public var maximumInput: Float = 1.0 {
        didSet {
            maximumInputParameter?.setValue(maximumInput, originator: token!)
        }
    }
    public var minimumOutput: Float = 0.0 {
        didSet {
            minimumOutputParameter?.setValue(minimumOutput, originator: token!)
        }
    }
    public var maximumOutput: Float = 1.0 {
        didSet {
            maximumOutputParameter?.setValue(maximumOutput, originator: token!)
        }
    }

    public init(_ input: AKOperation) {
        super.init()

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x7363616c /*'scal'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKLinearTransformationAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKLinearTransformation",
            version: UInt32.max)

        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.output = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKLinearTransformationAudioUnit
            AKManager.sharedInstance.engine.attachNode(self.output!)
            AKManager.sharedInstance.engine.connect(input.output!, to: self.output!, format: nil)
        }

        guard let tree = internalAU?.parameterTree else { return }

        minimumInputParameter  = tree.valueForKey("minimumInput")  as? AUParameter
        maximumInputParameter  = tree.valueForKey("maximumInput")  as? AUParameter
        minimumOutputParameter = tree.valueForKey("minimumOutput") as? AUParameter
        maximumOutputParameter = tree.valueForKey("maximumOutput") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.minimumInputParameter!.address {
                    self.minimumInput = value
                }
                else if address == self.maximumInputParameter!.address {
                    self.maximumInput = value
                }
                else if address == self.minimumOutputParameter!.address {
                    self.minimumOutput = value
                }
                else if address == self.maximumOutputParameter!.address {
                    self.maximumOutput = value
                }
            }
        }

    }
}

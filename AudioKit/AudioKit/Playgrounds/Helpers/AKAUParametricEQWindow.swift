//
//  AKAUParametricEQWindow.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

#if os(OSX)
    import Foundation
    import Cocoa

    /// A Window to control AKAUParametricEQ in Playgrounds
    public class AKAUParametricEQWindow: NSWindow {

        private let windowWidth = 400
        private let padding = 30
        private let sliderHeight = 20
        private let numberOfComponents = 3

        /// Slider to control centerFreq
        public let centerFrequencySlider: NSSlider
        /// Slider to control q
        public let qSlider: NSSlider
        /// Slider to control gain
        public let gainSlider: NSSlider

        private let centerFrequencyTextField: NSTextField
        private let qTextField: NSTextField
        private let gainTextField: NSTextField

        private var parametricEQ: AKAUParametricEQ

        /// Initiate the AKAUParametricEQ window
        public init(_ control: AKAUParametricEQ) {
            parametricEQ = control
            let sliderWidth = windowWidth - 2 * padding

            centerFrequencySlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            qSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            gainSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))

            centerFrequencyTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            qTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            gainTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))

            let titleHeightApproximation = 50
            let windowHeight = padding * 2 + titleHeightApproximation + numberOfComponents * 3 * sliderHeight

            super.init(contentRect: NSRect(x: padding, y: padding, width: windowWidth, height: windowHeight),
                styleMask: NSTitledWindowMask,
                backing: .Buffered,
                `defer`: false)
            self.hasShadow = true
            self.styleMask = NSBorderlessWindowMask | NSResizableWindowMask
            self.movableByWindowBackground = true
            self.level = 7
            self.title = "AKAUParametricEQ"

            let viewRect = NSRect(x: 0, y: 0, width: windowWidth, height: windowHeight)
            let view = NSView(frame: viewRect)

            let topTitle = NSTextField()
            topTitle.stringValue = "AKAUParametricEQ"
            topTitle.editable = false
            topTitle.drawsBackground = false
            topTitle.bezeled = false
            topTitle.alignment = NSCenterTextAlignment
            topTitle.font = NSFont(name: "Lucida Grande", size: 24)
            topTitle.sizeToFit()
            topTitle.frame.origin.x = CGFloat(windowWidth / 2) - topTitle.frame.width / 2
            topTitle.frame.origin.y = CGFloat(windowHeight - padding) - topTitle.frame.height
            view.addSubview(topTitle)

            centerFrequencyTextField.stringValue = "Center Freq: \(parametricEQ.centerFrequency) Hz"
            centerFrequencyTextField.editable = false
            centerFrequencyTextField.drawsBackground = false
            centerFrequencyTextField.bezeled = false
            centerFrequencyTextField.frame.origin.y = topTitle.frame.origin.y -  2 *  CGFloat(sliderHeight)
            view.addSubview(centerFrequencyTextField)

            centerFrequencySlider.target = self
            centerFrequencySlider.action = "updatecenterFrequency"
            centerFrequencySlider.minValue = 20
            centerFrequencySlider.maxValue = 22050
            centerFrequencySlider.floatValue = Float(parametricEQ.centerFrequency)
            centerFrequencySlider.frame.origin.y = topTitle.frame.origin.y - 3 * CGFloat(sliderHeight)
            view.addSubview(centerFrequencySlider)
            qTextField.stringValue = "Q: \(parametricEQ.q) Hz"
            qTextField.editable = false
            qTextField.drawsBackground = false
            qTextField.bezeled = false
            qTextField.frame.origin.y = topTitle.frame.origin.y -  5 *  CGFloat(sliderHeight)
            view.addSubview(qTextField)

            qSlider.target = self
            qSlider.action = "updateQ"
            qSlider.minValue = 0.1
            qSlider.maxValue = 20
            qSlider.floatValue = Float(parametricEQ.q)
            qSlider.frame.origin.y = topTitle.frame.origin.y - 6 * CGFloat(sliderHeight)
            view.addSubview(qSlider)
            gainTextField.stringValue = "Gain: \(parametricEQ.gain) dB"
            gainTextField.editable = false
            gainTextField.drawsBackground = false
            gainTextField.bezeled = false
            gainTextField.frame.origin.y = topTitle.frame.origin.y -  8 *  CGFloat(sliderHeight)
            view.addSubview(gainTextField)

            gainSlider.target = self
            gainSlider.action = "updateGain"
            gainSlider.minValue = -20
            gainSlider.maxValue = 20
            gainSlider.floatValue = Float(parametricEQ.gain)
            gainSlider.frame.origin.y = topTitle.frame.origin.y - 9 * CGFloat(sliderHeight)
            view.addSubview(gainSlider)

            self.contentView!.addSubview(view)
            self.makeKeyAndOrderFront(nil)
        }

        private func updatecenterFrequency() {
            parametricEQ.centerFrequency = centerFrequencySlider.floatValue
            centerFrequencyTextField.stringValue = "Center Freq \(String(format: "%0.4f", parametricEQ.centerFrequency)) Hz"
        }
        private func updateQ() {
            parametricEQ.q = qSlider.floatValue
            qTextField.stringValue = "Q \(String(format: "%0.4f", parametricEQ.q)) Hz"
        }
        private func updateGain() {
            parametricEQ.gain = gainSlider.floatValue
            gainTextField.stringValue = "Gain \(String(format: "%0.4f", parametricEQ.gain)) dB"
        }

        /// Required initializer
        required public init?(coder: NSCoder) {
            fatalError("init(coder:) has not been implemented")
        }
    }

#endif

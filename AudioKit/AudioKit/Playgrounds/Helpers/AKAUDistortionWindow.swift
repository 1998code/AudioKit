//
//  AKAUDistortionWindow.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

#if os(OSX)
    import Foundation
    import Cocoa

    /// A Window to control AKAUDistortion in Playgrounds
    public class AKAUDistortionWindow: NSWindow {

        private let windowWidth = 400
        private let padding = 30
        private let sliderHeight = 20
        private let numberOfComponents = 16

        /// Slider to control delay
        public let delaySlider: NSSlider
        /// Slider to control decay
        public let decaySlider: NSSlider
        /// Slider to control delayMix
        public let delayMixSlider: NSSlider
        /// Slider to control decimation
        public let decimationSlider: NSSlider
        /// Slider to control rounding
        public let roundingSlider: NSSlider
        /// Slider to control decimationMix
        public let decimationMixSlider: NSSlider
        /// Slider to control linearTerm
        public let linearTermSlider: NSSlider
        /// Slider to control squaredTerm
        public let squaredTermSlider: NSSlider
        /// Slider to control cubicTerm
        public let cubicTermSlider: NSSlider
        /// Slider to control polynomialMix
        public let polynomialMixSlider: NSSlider
        /// Slider to control ringModFreq1
        public let ringModFreq1Slider: NSSlider
        /// Slider to control ringModFreq2
        public let ringModFreq2Slider: NSSlider
        /// Slider to control ringModBalance
        public let ringModBalanceSlider: NSSlider
        /// Slider to control ringModMix
        public let ringModMixSlider: NSSlider
        /// Slider to control softClipGain
        public let softClipGainSlider: NSSlider
        /// Slider to control finalMix
        public let finalMixSlider: NSSlider

        private let delayTextField: NSTextField
        private let decayTextField: NSTextField
        private let delayMixTextField: NSTextField
        private let decimationTextField: NSTextField
        private let roundingTextField: NSTextField
        private let decimationMixTextField: NSTextField
        private let linearTermTextField: NSTextField
        private let squaredTermTextField: NSTextField
        private let cubicTermTextField: NSTextField
        private let polynomialMixTextField: NSTextField
        private let ringModFreq1TextField: NSTextField
        private let ringModFreq2TextField: NSTextField
        private let ringModBalanceTextField: NSTextField
        private let ringModMixTextField: NSTextField
        private let softClipGainTextField: NSTextField
        private let finalMixTextField: NSTextField

        private var distortion: AKAUDistortion

        /// Initiate the AKAUDistortion window
        public init(_ control: AKAUDistortion) {
            distortion = control
            let sliderWidth = windowWidth - 2 * padding

            delaySlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            decaySlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            delayMixSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            decimationSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            roundingSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            decimationMixSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            linearTermSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            squaredTermSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            cubicTermSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            polynomialMixSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModFreq1Slider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModFreq2Slider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModBalanceSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModMixSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            softClipGainSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            finalMixSlider = NSSlider(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))

            delayTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            decayTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            delayMixTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            decimationTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            roundingTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            decimationMixTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            linearTermTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            squaredTermTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            cubicTermTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            polynomialMixTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModFreq1TextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModFreq2TextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModBalanceTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            ringModMixTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            softClipGainTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))
            finalMixTextField = NSTextField(frame: NSRect(x: padding, y: 0, width: sliderWidth, height: sliderHeight))

            let titleHeightApproximation = 50
            let windowHeight = padding * 2 + titleHeightApproximation + numberOfComponents * 3 * sliderHeight

            super.init(contentRect: NSRect(x: padding, y: padding, width: windowWidth, height: windowHeight),
                styleMask: NSTitledWindowMask,
                backing: .Buffered,
                `defer`: false)
            self.hasShadow = true
            self.styleMask = NSBorderlessWindowMask | NSResizableWindowMask
            self.movableByWindowBackground = true
            self.level = 7
            self.title = "AKAUDistortion"

            let viewRect = NSRect(x: 0, y: 0, width: windowWidth, height: windowHeight)
            let view = NSView(frame: viewRect)

            let topTitle = NSTextField()
            topTitle.stringValue = "AKAUDistortion"
            topTitle.editable = false
            topTitle.drawsBackground = false
            topTitle.bezeled = false
            topTitle.alignment = NSCenterTextAlignment
            topTitle.font = NSFont(name: "Lucida Grande", size: 24)
            topTitle.sizeToFit()
            topTitle.frame.origin.x = CGFloat(windowWidth / 2) - topTitle.frame.width / 2
            topTitle.frame.origin.y = CGFloat(windowHeight - padding) - topTitle.frame.height
            view.addSubview(topTitle)

            delayTextField.stringValue = "Delay: \(distortion.delay) Milliseconds"
            delayTextField.editable = false
            delayTextField.drawsBackground = false
            delayTextField.bezeled = false
            delayTextField.frame.origin.y = topTitle.frame.origin.y -  2 *  CGFloat(sliderHeight)
            view.addSubview(delayTextField)

            delaySlider.target = self
            delaySlider.action = "updateDelay"
            delaySlider.minValue = 0.1
            delaySlider.maxValue = 500
            delaySlider.floatValue = Float(distortion.delay)
            delaySlider.frame.origin.y = topTitle.frame.origin.y - 3 * CGFloat(sliderHeight)
            view.addSubview(delaySlider)
            decayTextField.stringValue = "Decay: \(distortion.decay) Rate"
            decayTextField.editable = false
            decayTextField.drawsBackground = false
            decayTextField.bezeled = false
            decayTextField.frame.origin.y = topTitle.frame.origin.y -  5 *  CGFloat(sliderHeight)
            view.addSubview(decayTextField)

            decaySlider.target = self
            decaySlider.action = "updateDecay"
            decaySlider.minValue = 0.1
            decaySlider.maxValue = 50
            decaySlider.floatValue = Float(distortion.decay)
            decaySlider.frame.origin.y = topTitle.frame.origin.y - 6 * CGFloat(sliderHeight)
            view.addSubview(decaySlider)
            delayMixTextField.stringValue = "Delay Mix: \(distortion.delayMix) Percent"
            delayMixTextField.editable = false
            delayMixTextField.drawsBackground = false
            delayMixTextField.bezeled = false
            delayMixTextField.frame.origin.y = topTitle.frame.origin.y -  8 *  CGFloat(sliderHeight)
            view.addSubview(delayMixTextField)

            delayMixSlider.target = self
            delayMixSlider.action = "updateDelaymix"
            delayMixSlider.minValue = 0
            delayMixSlider.maxValue = 100
            delayMixSlider.floatValue = Float(distortion.delayMix)
            delayMixSlider.frame.origin.y = topTitle.frame.origin.y - 9 * CGFloat(sliderHeight)
            view.addSubview(delayMixSlider)
            decimationTextField.stringValue = "Decimation: \(distortion.decimation) Percent"
            decimationTextField.editable = false
            decimationTextField.drawsBackground = false
            decimationTextField.bezeled = false
            decimationTextField.frame.origin.y = topTitle.frame.origin.y -  11 *  CGFloat(sliderHeight)
            view.addSubview(decimationTextField)

            decimationSlider.target = self
            decimationSlider.action = "updateDecimation"
            decimationSlider.minValue = 0
            decimationSlider.maxValue = 100
            decimationSlider.floatValue = Float(distortion.decimation)
            decimationSlider.frame.origin.y = topTitle.frame.origin.y - 12 * CGFloat(sliderHeight)
            view.addSubview(decimationSlider)
            roundingTextField.stringValue = "Rounding: \(distortion.rounding) Percent"
            roundingTextField.editable = false
            roundingTextField.drawsBackground = false
            roundingTextField.bezeled = false
            roundingTextField.frame.origin.y = topTitle.frame.origin.y -  14 *  CGFloat(sliderHeight)
            view.addSubview(roundingTextField)

            roundingSlider.target = self
            roundingSlider.action = "updateRounding"
            roundingSlider.minValue = 0
            roundingSlider.maxValue = 100
            roundingSlider.floatValue = Float(distortion.rounding)
            roundingSlider.frame.origin.y = topTitle.frame.origin.y - 15 * CGFloat(sliderHeight)
            view.addSubview(roundingSlider)
            decimationMixTextField.stringValue = "Decimation Mix: \(distortion.decimationMix) Percent"
            decimationMixTextField.editable = false
            decimationMixTextField.drawsBackground = false
            decimationMixTextField.bezeled = false
            decimationMixTextField.frame.origin.y = topTitle.frame.origin.y -  17 *  CGFloat(sliderHeight)
            view.addSubview(decimationMixTextField)

            decimationMixSlider.target = self
            decimationMixSlider.action = "updateDecimationmix"
            decimationMixSlider.minValue = 0
            decimationMixSlider.maxValue = 100
            decimationMixSlider.floatValue = Float(distortion.decimationMix)
            decimationMixSlider.frame.origin.y = topTitle.frame.origin.y - 18 * CGFloat(sliderHeight)
            view.addSubview(decimationMixSlider)
            linearTermTextField.stringValue = "Linear Term: \(distortion.linearTerm) Percent"
            linearTermTextField.editable = false
            linearTermTextField.drawsBackground = false
            linearTermTextField.bezeled = false
            linearTermTextField.frame.origin.y = topTitle.frame.origin.y -  20 *  CGFloat(sliderHeight)
            view.addSubview(linearTermTextField)

            linearTermSlider.target = self
            linearTermSlider.action = "updateLinearterm"
            linearTermSlider.minValue = 0
            linearTermSlider.maxValue = 100
            linearTermSlider.floatValue = Float(distortion.linearTerm)
            linearTermSlider.frame.origin.y = topTitle.frame.origin.y - 21 * CGFloat(sliderHeight)
            view.addSubview(linearTermSlider)
            squaredTermTextField.stringValue = "Squared Term: \(distortion.squaredTerm) Percent"
            squaredTermTextField.editable = false
            squaredTermTextField.drawsBackground = false
            squaredTermTextField.bezeled = false
            squaredTermTextField.frame.origin.y = topTitle.frame.origin.y -  23 *  CGFloat(sliderHeight)
            view.addSubview(squaredTermTextField)

            squaredTermSlider.target = self
            squaredTermSlider.action = "updateSquaredterm"
            squaredTermSlider.minValue = 0
            squaredTermSlider.maxValue = 100
            squaredTermSlider.floatValue = Float(distortion.squaredTerm)
            squaredTermSlider.frame.origin.y = topTitle.frame.origin.y - 24 * CGFloat(sliderHeight)
            view.addSubview(squaredTermSlider)
            cubicTermTextField.stringValue = "Cubic Term: \(distortion.cubicTerm) Percent"
            cubicTermTextField.editable = false
            cubicTermTextField.drawsBackground = false
            cubicTermTextField.bezeled = false
            cubicTermTextField.frame.origin.y = topTitle.frame.origin.y -  26 *  CGFloat(sliderHeight)
            view.addSubview(cubicTermTextField)

            cubicTermSlider.target = self
            cubicTermSlider.action = "updateCubicterm"
            cubicTermSlider.minValue = 0
            cubicTermSlider.maxValue = 100
            cubicTermSlider.floatValue = Float(distortion.cubicTerm)
            cubicTermSlider.frame.origin.y = topTitle.frame.origin.y - 27 * CGFloat(sliderHeight)
            view.addSubview(cubicTermSlider)
            polynomialMixTextField.stringValue = "Polynomial Mix: \(distortion.polynomialMix) Percent"
            polynomialMixTextField.editable = false
            polynomialMixTextField.drawsBackground = false
            polynomialMixTextField.bezeled = false
            polynomialMixTextField.frame.origin.y = topTitle.frame.origin.y -  29 *  CGFloat(sliderHeight)
            view.addSubview(polynomialMixTextField)

            polynomialMixSlider.target = self
            polynomialMixSlider.action = "updatePolynomialmix"
            polynomialMixSlider.minValue = 0
            polynomialMixSlider.maxValue = 100
            polynomialMixSlider.floatValue = Float(distortion.polynomialMix)
            polynomialMixSlider.frame.origin.y = topTitle.frame.origin.y - 30 * CGFloat(sliderHeight)
            view.addSubview(polynomialMixSlider)
            ringModFreq1TextField.stringValue = "Ring Mod Freq1: \(distortion.ringModFreq1) Hertz"
            ringModFreq1TextField.editable = false
            ringModFreq1TextField.drawsBackground = false
            ringModFreq1TextField.bezeled = false
            ringModFreq1TextField.frame.origin.y = topTitle.frame.origin.y -  32 *  CGFloat(sliderHeight)
            view.addSubview(ringModFreq1TextField)

            ringModFreq1Slider.target = self
            ringModFreq1Slider.action = "updateRingmodfreq1"
            ringModFreq1Slider.minValue = 0.5
            ringModFreq1Slider.maxValue = 8000
            ringModFreq1Slider.floatValue = Float(distortion.ringModFreq1)
            ringModFreq1Slider.frame.origin.y = topTitle.frame.origin.y - 33 * CGFloat(sliderHeight)
            view.addSubview(ringModFreq1Slider)
            ringModFreq2TextField.stringValue = "Ring Mod Freq2: \(distortion.ringModFreq2) Hertz"
            ringModFreq2TextField.editable = false
            ringModFreq2TextField.drawsBackground = false
            ringModFreq2TextField.bezeled = false
            ringModFreq2TextField.frame.origin.y = topTitle.frame.origin.y -  35 *  CGFloat(sliderHeight)
            view.addSubview(ringModFreq2TextField)

            ringModFreq2Slider.target = self
            ringModFreq2Slider.action = "updateRingmodfreq2"
            ringModFreq2Slider.minValue = 0.5
            ringModFreq2Slider.maxValue = 8000
            ringModFreq2Slider.floatValue = Float(distortion.ringModFreq2)
            ringModFreq2Slider.frame.origin.y = topTitle.frame.origin.y - 36 * CGFloat(sliderHeight)
            view.addSubview(ringModFreq2Slider)
            ringModBalanceTextField.stringValue = "Ring Mod Balance: \(distortion.ringModBalance) Percent"
            ringModBalanceTextField.editable = false
            ringModBalanceTextField.drawsBackground = false
            ringModBalanceTextField.bezeled = false
            ringModBalanceTextField.frame.origin.y = topTitle.frame.origin.y -  38 *  CGFloat(sliderHeight)
            view.addSubview(ringModBalanceTextField)

            ringModBalanceSlider.target = self
            ringModBalanceSlider.action = "updateRingmodbalance"
            ringModBalanceSlider.minValue = 0
            ringModBalanceSlider.maxValue = 100
            ringModBalanceSlider.floatValue = Float(distortion.ringModBalance)
            ringModBalanceSlider.frame.origin.y = topTitle.frame.origin.y - 39 * CGFloat(sliderHeight)
            view.addSubview(ringModBalanceSlider)
            ringModMixTextField.stringValue = "Ring Mod Mix: \(distortion.ringModMix) Percent"
            ringModMixTextField.editable = false
            ringModMixTextField.drawsBackground = false
            ringModMixTextField.bezeled = false
            ringModMixTextField.frame.origin.y = topTitle.frame.origin.y -  41 *  CGFloat(sliderHeight)
            view.addSubview(ringModMixTextField)

            ringModMixSlider.target = self
            ringModMixSlider.action = "updateRingmodmix"
            ringModMixSlider.minValue = 0
            ringModMixSlider.maxValue = 100
            ringModMixSlider.floatValue = Float(distortion.ringModMix)
            ringModMixSlider.frame.origin.y = topTitle.frame.origin.y - 42 * CGFloat(sliderHeight)
            view.addSubview(ringModMixSlider)
            softClipGainTextField.stringValue = "Soft Clip Gain: \(distortion.softClipGain) dB"
            softClipGainTextField.editable = false
            softClipGainTextField.drawsBackground = false
            softClipGainTextField.bezeled = false
            softClipGainTextField.frame.origin.y = topTitle.frame.origin.y -  44 *  CGFloat(sliderHeight)
            view.addSubview(softClipGainTextField)

            softClipGainSlider.target = self
            softClipGainSlider.action = "updateSoftclipgain"
            softClipGainSlider.minValue = -80
            softClipGainSlider.maxValue = 20
            softClipGainSlider.floatValue = Float(distortion.softClipGain)
            softClipGainSlider.frame.origin.y = topTitle.frame.origin.y - 45 * CGFloat(sliderHeight)
            view.addSubview(softClipGainSlider)
            finalMixTextField.stringValue = "Final Mix: \(distortion.finalMix) Percent"
            finalMixTextField.editable = false
            finalMixTextField.drawsBackground = false
            finalMixTextField.bezeled = false
            finalMixTextField.frame.origin.y = topTitle.frame.origin.y -  47 *  CGFloat(sliderHeight)
            view.addSubview(finalMixTextField)

            finalMixSlider.target = self
            finalMixSlider.action = "updateFinalmix"
            finalMixSlider.minValue = 0
            finalMixSlider.maxValue = 100
            finalMixSlider.floatValue = Float(distortion.finalMix)
            finalMixSlider.frame.origin.y = topTitle.frame.origin.y - 48 * CGFloat(sliderHeight)
            view.addSubview(finalMixSlider)

            self.contentView!.addSubview(view)
            self.makeKeyAndOrderFront(nil)
        }

        internal func updateDelay() {
            distortion.delay = delaySlider.floatValue
            delayTextField.stringValue = "Delay \(String(format: "%0.4f", distortion.delay)) Milliseconds"
        }
        internal func updateDecay() {
            distortion.decay = decaySlider.floatValue
            decayTextField.stringValue = "Decay \(String(format: "%0.4f", distortion.decay)) Rate"
        }
        internal func updateDelaymix() {
            distortion.delayMix = delayMixSlider.floatValue
            delayMixTextField.stringValue = "Delay Mix \(String(format: "%0.4f", distortion.delayMix)) Percent"
        }
        internal func updateDecimation() {
            distortion.decimation = decimationSlider.floatValue
            decimationTextField.stringValue = "Decimation \(String(format: "%0.4f", distortion.decimation)) Percent"
        }
        internal func updateRounding() {
            distortion.rounding = roundingSlider.floatValue
            roundingTextField.stringValue = "Rounding \(String(format: "%0.4f", distortion.rounding)) Percent"
        }
        internal func updateDecimationmix() {
            distortion.decimationMix = decimationMixSlider.floatValue
            decimationMixTextField.stringValue = "Decimation Mix \(String(format: "%0.4f", distortion.decimationMix)) Percent"
        }
        internal func updateLinearterm() {
            distortion.linearTerm = linearTermSlider.floatValue
            linearTermTextField.stringValue = "Linear Term \(String(format: "%0.4f", distortion.linearTerm)) Percent"
        }
        internal func updateSquaredterm() {
            distortion.squaredTerm = squaredTermSlider.floatValue
            squaredTermTextField.stringValue = "Squared Term \(String(format: "%0.4f", distortion.squaredTerm)) Percent"
        }
        internal func updateCubicterm() {
            distortion.cubicTerm = cubicTermSlider.floatValue
            cubicTermTextField.stringValue = "Cubic Term \(String(format: "%0.4f", distortion.cubicTerm)) Percent"
        }
        internal func updatePolynomialmix() {
            distortion.polynomialMix = polynomialMixSlider.floatValue
            polynomialMixTextField.stringValue = "Polynomial Mix \(String(format: "%0.4f", distortion.polynomialMix)) Percent"
        }
        internal func updateRingmodfreq1() {
            distortion.ringModFreq1 = ringModFreq1Slider.floatValue
            ringModFreq1TextField.stringValue = "Ring Mod Freq1 \(String(format: "%0.4f", distortion.ringModFreq1)) Hertz"
        }
        internal func updateRingmodfreq2() {
            distortion.ringModFreq2 = ringModFreq2Slider.floatValue
            ringModFreq2TextField.stringValue = "Ring Mod Freq2 \(String(format: "%0.4f", distortion.ringModFreq2)) Hertz"
        }
        internal func updateRingmodbalance() {
            distortion.ringModBalance = ringModBalanceSlider.floatValue
            ringModBalanceTextField.stringValue = "Ring Mod Balance \(String(format: "%0.4f", distortion.ringModBalance)) Percent"
        }
        internal func updateRingmodmix() {
            distortion.ringModMix = ringModMixSlider.floatValue
            ringModMixTextField.stringValue = "Ring Mod Mix \(String(format: "%0.4f", distortion.ringModMix)) Percent"
        }
        internal func updateSoftclipgain() {
            distortion.softClipGain = softClipGainSlider.floatValue
            softClipGainTextField.stringValue = "Soft Clip Gain \(String(format: "%0.4f", distortion.softClipGain)) dB"
        }
        internal func updateFinalmix() {
            distortion.finalMix = finalMixSlider.floatValue
            finalMixTextField.stringValue = "Final Mix \(String(format: "%0.4f", distortion.finalMix)) Percent"
        }

        /// Required initializer
        required public init?(coder: NSCoder) {
            fatalError("init(coder:) has not been implemented")
        }
    }

#endif

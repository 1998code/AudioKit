//
//  AKFlatSlider.swift
//  AudioKit
//
//  Created by Aurelius Prochazka on 7/26/16.
//  Copyright (c) 2016 AudioKit. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class AKFlatSlider : NSObject {

    //// Drawing Methods

    public class func drawFlatSlider(sliderColor sliderColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.062, alpha: 1.000), currentValue: CGFloat = 0, initialValue: CGFloat = 0, minimum: CGFloat = 0, maximum: CGFloat = 1, propertyName: String = "Property Name", currentValueText: String = "0.0") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let backgroundColor = UIColor(red: 0.835, green: 0.842, blue: 0.836, alpha: 0.925)

        //// Variable Declarations
        let currentWidth: CGFloat = currentValue < minimum ? 0 : (currentValue < maximum ? (currentValue - minimum) / (maximum - minimum) * 300 : 300)
        let initialX: CGFloat = initialValue < minimum ? 9 : 9 + (initialValue < maximum ? (initialValue - minimum) / (maximum - minimum) * 300 : 300)

        //// sliderArea Drawing
        let sliderAreaPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 300, height: 40))
        backgroundColor.setFill()
        sliderAreaPath.fill()


        //// valueRectangle Drawing
        let valueRectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: currentWidth, height: 40))
        sliderColor.setFill()
        valueRectanglePath.fill()


        //// initialValueBezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, (initialX - 8), -0)

        let initialValueBezierPath = UIBezierPath()
        initialValueBezierPath.moveToPoint(CGPoint(x: 0, y: 0))
        initialValueBezierPath.addLineToPoint(CGPoint(x: 0.25, y: 40))
        UIColor.whiteColor().setFill()
        initialValueBezierPath.fill()
        UIColor.blackColor().setStroke()
        initialValueBezierPath.lineWidth = 0.5
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 0, [2, 2], 2)
        initialValueBezierPath.stroke()
        CGContextRestoreGState(context)

        CGContextRestoreGState(context)


        //// nameLabel Drawing
        let nameLabelRect = CGRect(x: 0, y: 0, width: 300, height: 40)
        let nameLabelStyle = NSMutableParagraphStyle()
        nameLabelStyle.alignment = .Left

        let nameLabelFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: nameLabelStyle]

        let nameLabelInset: CGRect = CGRectInset(nameLabelRect, 10, 0)
        let nameLabelTextHeight: CGFloat = NSString(string: propertyName).boundingRectWithSize(CGSize(width: nameLabelInset.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: nameLabelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, nameLabelInset)
        NSString(string: propertyName).drawInRect(CGRect(x: nameLabelInset.minX, y: nameLabelInset.minY + (nameLabelInset.height - nameLabelTextHeight) / 2, width: nameLabelInset.width, height: nameLabelTextHeight), withAttributes: nameLabelFontAttributes)
        CGContextRestoreGState(context)


        //// valueLabel Drawing
        let valueLabelRect = CGRect(x: 0, y: 0, width: 300, height: 40)
        let valueLabelStyle = NSMutableParagraphStyle()
        valueLabelStyle.alignment = .Right

        let valueLabelFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: valueLabelStyle]

        let valueLabelInset: CGRect = CGRectInset(valueLabelRect, 10, 0)
        let valueLabelTextHeight: CGFloat = NSString(string: currentValueText).boundingRectWithSize(CGSize(width: valueLabelInset.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: valueLabelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, valueLabelInset)
        NSString(string: currentValueText).drawInRect(CGRect(x: valueLabelInset.minX, y: valueLabelInset.minY + (valueLabelInset.height - valueLabelTextHeight) / 2, width: valueLabelInset.width, height: valueLabelTextHeight), withAttributes: valueLabelFontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfFlatSlider(sliderColor sliderColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.062, alpha: 1.000), currentValue: CGFloat = 0, initialValue: CGFloat = 0, minimum: CGFloat = 0, maximum: CGFloat = 1, propertyName: String = "Property Name", currentValueText: String = "0.0") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 300, height: 40), false, 0)
            AKFlatSlider.drawFlatSlider(sliderColor: sliderColor, currentValue: currentValue, initialValue: initialValue, minimum: minimum, maximum: maximum, propertyName: propertyName, currentValueText: currentValueText)

        let imageOfFlatSlider = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFlatSlider
    }

}

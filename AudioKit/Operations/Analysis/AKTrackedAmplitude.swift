//
//  AKTrackedAmplitude.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/15/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Tracked Amplitude of an audio signal

Performs a "root-mean-square" on a signal to get overall amplitude of a signal. The output signal looks similar to that of a classic VU meter.
*/
@objc class AKTrackedAmplitude : AKParameter {

    // MARK: - Properties

    private var rms = UnsafeMutablePointer<sp_rms>.alloc(1)

    private var input = AKParameter()


    /** Half-power point (in Hz) of internal lowpass filter. [Default Value: 10] */
    var halfPowerPoint: AKParameter = akp(10) {
        didSet {
            halfPowerPoint.bind(&rms.memory.ihp)
            dependencies.append(halfPowerPoint)
        }
    }


    // MARK: - Initializers

    /** Instantiates the amplitude with default values

    - parameter input: Input audio signal. 
    */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /** Instantiates the amplitude with all values

    - parameter input: Input audio signal. 
    - parameter halfPowerPoint: Half-power point (in Hz) of internal lowpass filter. [Default Value: 10]
    */
    convenience init(
        input          sourceInput: AKParameter,
        halfPowerPoint ihpInput:    AKParameter)
    {
        self.init(input: sourceInput)
        halfPowerPoint = ihpInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal amplitude */
    internal func bindAll() {
        halfPowerPoint.bind(&rms.memory.ihp)
        dependencies.append(halfPowerPoint)
    }

    /** Internal set up function */
    internal func setup() {
        sp_rms_create(&rms)
        sp_rms_init(AKManager.sharedManager.data, rms)
    }

    /** Computation of the next value */
    override func compute() {
        sp_rms_compute(AKManager.sharedManager.data, rms, &(input.leftOutput), &leftOutput);
        sp_rms_compute(AKManager.sharedManager.data, rms, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_rms_destroy(&rms)
    }
}

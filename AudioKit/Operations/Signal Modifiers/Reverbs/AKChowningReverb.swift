//
//  AKChowningReverb.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** John Chowning reverberator

This is was built using the JC reverb implentation found in FAUST. According to the source code, the specifications for this implementation were found on an old SAIL DART backup tape.
This class is derived from the CLM JCRev function, which is based on the use of networks of simple allpass and comb delay filters.  This class implements three series allpass units, followed by four parallel comb filters, and two decorrelation delay lines in parallel at the output.
*/
@objc class AKChowningReverb : AKParameter {

    // MARK: - Properties

    private var jcrev = UnsafeMutablePointer<sp_jcrev>.alloc(1)
    private var jcrev2 = UnsafeMutablePointer<sp_jcrev>.alloc(1)

    private var input = AKParameter()



    // MARK: - Initializers

    /** Instantiates the reverb with default values

    - parameter input: Input audio signal. 
    */
    init(input: AKParameter)
    {
        super.init()
        self.input = input
        setup()
        dependencies = [input]
        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal reverb */
    internal func bindAll() {
    }

    /** Internal set up function */
    internal func setup() {
        sp_jcrev_create(&jcrev)
        sp_jcrev_create(&jcrev2)
        sp_jcrev_init(AKManager.sharedManager.data, jcrev)
        sp_jcrev_init(AKManager.sharedManager.data, jcrev2)
    }

    /** Computation of the next value */
    override func compute() {
        sp_jcrev_compute(AKManager.sharedManager.data, jcrev, &(input.leftOutput), &leftOutput);
        sp_jcrev_compute(AKManager.sharedManager.data, jcrev2, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_jcrev_destroy(&jcrev)
        sp_jcrev_destroy(&jcrev2)
    }
}

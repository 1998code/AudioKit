//
//  AKPanner.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/13/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Stereo Panner

Stereo Panner
*/
@objc class AKPanner : AKParameter {

    // MARK: - Properties

    private var panst = UnsafeMutablePointer<sp_panst>.alloc(1)

    private var input = AKParameter()


    /** Panning. A value of zero is hard left, and a value of 1 is hard right. [Default Value: 0.5] */
    var pan: AKParameter = akp(0.5) {
        didSet {
            pan.bind(&panst.memory.pan)
            dependencies.append(pan)
        }
    }


    // MARK: - Initializers

    /** Instantiates the panner with default values

    - parameter input: Input audio signal. 
    */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /** Instantiates the panner with all values

    - parameter input: Input audio signal. 
    - parameter pan: Panning. A value of zero is hard left, and a value of 1 is hard right. [Default Value: 0.5]
    */
    convenience init(
        input sourceInput: AKParameter,
        pan   panInput:    AKParameter)
    {
        self.init(input: sourceInput)
        pan   = panInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal panner */
    internal func bindAll() {
        pan  .bind(&panst.memory.pan)
        dependencies.append(pan)
    }

    /** Internal set up function */
    internal func setup() {
        sp_panst_create(&panst)
        sp_panst_init(AKManager.sharedManager.data, panst)
    }

    /** Computation of the next value */
    override func compute() {
        sp_panst_compute(AKManager.sharedManager.data, panst, &(input.leftOutput), &(input.rightOutput), &leftOutput, &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_panst_destroy(&panst)
    }
}

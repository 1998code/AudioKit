//
//  AKDecimator.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Digital Signal Decimator

Otherwise known as a "bitcrusher", Decimator will digitally degrade a signal.
*/
@objc class AKDecimator : AKParameter {

    // MARK: - Properties

    private var decimator = UnsafeMutablePointer<sp_decimator>.alloc(1)
    private var decimator2 = UnsafeMutablePointer<sp_decimator>.alloc(1)

    private var input = AKParameter()


    /** The bit depth of signal output. Typically in range (1-24). Non-integer values are OK. [Default Value: 8] */
    var bitDepth: AKParameter = akp(8) {
        didSet {
            bitDepth.bind(&decimator.memory.bitdepth, right:&decimator2.memory.bitdepth)
            dependencies.append(bitDepth)
        }
    }

    /** The sample rate of signal output. [Default Value: 10000] */
    var sampleRate: AKParameter = akp(10000) {
        didSet {
            sampleRate.bind(&decimator.memory.srate, right:&decimator2.memory.srate)
            dependencies.append(sampleRate)
        }
    }


    // MARK: - Initializers

    /** Instantiates the decimator with default values

    - parameter input: Input audio signal. 
    */
    init(input: AKParameter)
    {
        super.init()
        self.input = input
        setup()
        dependencies = [input]
        bindAll()
    }

    /** Instantiates the decimator with all values

    - parameter input: Input audio signal. 
    - parameter bitDepth: The bit depth of signal output. Typically in range (1-24). Non-integer values are OK. [Default Value: 8]
    - parameter sampleRate: The sample rate of signal output. [Default Value: 10000]
    */
    convenience init(
        input:      AKParameter,
        bitDepth:   AKParameter,
        sampleRate: AKParameter)
    {
        self.init(input: input)
        self.bitDepth   = bitDepth
        self.sampleRate = sampleRate

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal decimator */
    internal func bindAll() {
        bitDepth  .bind(&decimator.memory.bitdepth, right:&decimator2.memory.bitdepth)
        sampleRate.bind(&decimator.memory.srate, right:&decimator2.memory.srate)
        dependencies.append(bitDepth)
        dependencies.append(sampleRate)
    }

    /** Internal set up function */
    internal func setup() {
        sp_decimator_create(&decimator)
        sp_decimator_create(&decimator2)
        sp_decimator_init(AKManager.sharedManager.data, decimator)
        sp_decimator_init(AKManager.sharedManager.data, decimator2)
    }

    /** Computation of the next value */
    override func compute() {
        sp_decimator_compute(AKManager.sharedManager.data, decimator, &(input.leftOutput), &leftOutput);
        sp_decimator_compute(AKManager.sharedManager.data, decimator2, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_decimator_destroy(&decimator)
        sp_decimator_destroy(&decimator2)
    }
}

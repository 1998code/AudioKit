//
//  AKThreePoleLowpassFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** A 3-pole sweepable resonant lowpass filter.

3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion.
*/
@objc class AKThreePoleLowpassFilter : AKParameter {

    // MARK: - Properties

    private var lpf18 = UnsafeMutablePointer<sp_lpf18>.alloc(1)
    private var lpf182 = UnsafeMutablePointer<sp_lpf18>.alloc(1)

    private var input = AKParameter()


    /** Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount. [Default Value: 0.5] */
    var distortion: AKParameter = akp(0.5) {
        didSet {
            distortion.bind(&lpf18.memory.dist, right:&lpf182.memory.dist)
            dependencies.append(distortion)
        }
    }

    /** Filter cutoff frequency, in Hertz [Default Value: 1500] */
    var cutoffFrequency: AKParameter = akp(1500) {
        didSet {
            cutoffFrequency.bind(&lpf18.memory.cutoff, right:&lpf182.memory.cutoff)
            dependencies.append(cutoffFrequency)
        }
    }

    /** Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect. [Default Value: 0.5] */
    var resonance: AKParameter = akp(0.5) {
        didSet {
            resonance.bind(&lpf18.memory.res, right:&lpf182.memory.res)
            dependencies.append(resonance)
        }
    }


    // MARK: - Initializers

    /** Instantiates the filter with default values

    - parameter input: Input audio signal. 
    */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /** Instantiates the filter with all values

    - parameter input: Input audio signal. 
    - parameter distortion: Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount. [Default Value: 0.5]
    - parameter cutoffFrequency: Filter cutoff frequency, in Hertz [Default Value: 1500]
    - parameter resonance: Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect. [Default Value: 0.5]
    */
    convenience init(
        input           sourceInput: AKParameter,
        distortion      distInput:   AKParameter,
        cutoffFrequency cutoffInput: AKParameter,
        resonance       resInput:    AKParameter)
    {
        self.init(input: sourceInput)
        distortion      = distInput
        cutoffFrequency = cutoffInput
        resonance       = resInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal filter */
    internal func bindAll() {
        distortion     .bind(&lpf18.memory.dist, right:&lpf182.memory.dist)
        cutoffFrequency.bind(&lpf18.memory.cutoff, right:&lpf182.memory.cutoff)
        resonance      .bind(&lpf18.memory.res, right:&lpf182.memory.res)
        dependencies.append(distortion)
        dependencies.append(cutoffFrequency)
        dependencies.append(resonance)
    }

    /** Internal set up function */
    internal func setup() {
        sp_lpf18_create(&lpf18)
        sp_lpf18_create(&lpf182)
        sp_lpf18_init(AKManager.sharedManager.data, lpf18)
        sp_lpf18_init(AKManager.sharedManager.data, lpf182)
    }

    /** Computation of the next value */
    override func compute() {
        sp_lpf18_compute(AKManager.sharedManager.data, lpf18, &(input.leftOutput), &leftOutput);
        sp_lpf18_compute(AKManager.sharedManager.data, lpf182, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_lpf18_destroy(&lpf18)
        sp_lpf18_destroy(&lpf182)
    }
}

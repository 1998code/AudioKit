//
//  AKFlatFrequencyResponseReverb.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/13/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** All-pass filter, often used for the creation of reverb modules.

This filter reiterates the input with an echo density determined by loop time. The attenuation rate is independent and is determined by the reverberation time (defined as the time in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude).  Output will begin to appear immediately.
*/
@objc class AKFlatFrequencyResponseReverb : AKParameter {

    // MARK: - Properties

    private var allpass = UnsafeMutablePointer<sp_allpass>.alloc(1)

    private var input = AKParameter()

    /** The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation. [Default Value: 0.1] */
    private var loopDuration: Float = 0


    /** The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude. [Default Value: 0.5] */
    var reverbDuration: AKParameter = akp(0.5) {
        didSet {
            reverbDuration.bind(&allpass.memory.revtime)
            dependencies.append(reverbDuration)
        }
    }


    // MARK: - Initializers

    /** Instantiates the reverb with default values

    - parameter input: Input audio signal. 
    */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /** Instantiates reverb with constants

    - parameter input: Input audio signal. 
    - parameter loopDuration: The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation. [Default Value: 0.1]
    */
    init (input sourceInput: AKParameter, loopDuration looptimeInput: Float) {
        super.init()
        input = sourceInput
        setup(looptimeInput)
        bindAll()
    }

    /** Instantiates the reverb with all values

    - parameter input: Input audio signal. 
    - parameter reverbDuration: The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude. [Default Value: 0.5]
    - parameter loopDuration: The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation. [Default Value: 0.1]
    */
    convenience init(
        input          sourceInput:   AKParameter,
        reverbDuration revtimeInput:  AKParameter,
        loopDuration   looptimeInput: Float)
    {
        self.init(input: sourceInput, loopDuration: looptimeInput)
        reverbDuration = revtimeInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal reverb */
    internal func bindAll() {
        reverbDuration.bind(&allpass.memory.revtime)
        dependencies.append(reverbDuration)
    }

    /** Internal set up function */
    internal func setup(loopDuration: Float = 0.1)
 {
        sp_allpass_create(&allpass)
        sp_allpass_init(AKManager.sharedManager.data, allpass, loopDuration)
    }

    /** Computation of the next value */
    override func compute() {
        sp_allpass_compute(AKManager.sharedManager.data, allpass, &(input.leftOutput), &leftOutput);
        sp_allpass_compute(AKManager.sharedManager.data, allpass, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_allpass_destroy(&allpass)
    }
}

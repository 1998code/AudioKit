//
//  AKFMOscillator.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/12/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Basic frequency modulated oscillator.

Classic FM Synthesis audio generation.
*/
@objc class AKFMOscillator : AKParameter {

    // MARK: - Properties

    private var fosc = UnsafeMutablePointer<sp_fosc>.alloc(1)


    /** Waveform table to use. [Default Value: sine] */
    var waveform = AKTable()

    /** In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies. [Default Value: 440] */
    var baseFrequency: AKParameter = akp(440) {
        didSet {
            baseFrequency.bind(&fosc.memory.freq)
            dependencies.append(baseFrequency)
        }
    }

    /** This multiplied by the baseFrequency gives the carrier frequency. [Default Value: 1] */
    var carrierMultiplier: AKParameter = akp(1) {
        didSet {
            carrierMultiplier.bind(&fosc.memory.car)
            dependencies.append(carrierMultiplier)
        }
    }

    /** This multiplied by the baseFrequency gives the modulating frequency. [Default Value: 1] */
    var modulatingMultiplier: AKParameter = akp(1) {
        didSet {
            modulatingMultiplier.bind(&fosc.memory.mod)
            dependencies.append(modulatingMultiplier)
        }
    }

    /** This multiplied by the modulating frequency gives the modulation amplitude. [Default Value: 1] */
    var modulationIndex: AKParameter = akp(1) {
        didSet {
            modulationIndex.bind(&fosc.memory.indx)
            dependencies.append(modulationIndex)
        }
    }

    /** This multiplied by the modulating frequency gives the modulation amplitude. [Default Value: 0.5] */
    var amplitude: AKParameter = akp(0.5) {
        didSet {
            amplitude.bind(&fosc.memory.amp)
            dependencies.append(amplitude)
        }
    }


    // MARK: - Initializers

    /** Instantiates the FM oscillator with default values */
    override init()
    {
        super.init()
        setup()
        dependencies = []
        bindAll()
    }

    /**
    Instantiates the FM oscillator with all values

    - parameter baseFrequency: In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies. [Default Value: 440]
    - parameter carrierMultiplier: This multiplied by the baseFrequency gives the carrier frequency. [Default Value: 1]
    - parameter modulatingMultiplier: This multiplied by the baseFrequency gives the modulating frequency. [Default Value: 1]
    - parameter modulationIndex: This multiplied by the modulating frequency gives the modulation amplitude. [Default Value: 1]
    - parameter amplitude: This multiplied by the modulating frequency gives the modulation amplitude. [Default Value: 0.5]
    */
    convenience init(
        baseFrequency        freqInput: AKParameter,
        carrierMultiplier    carInput:  AKParameter,
        modulatingMultiplier modInput:  AKParameter,
        modulationIndex      indxInput: AKParameter,
        amplitude            ampInput:  AKParameter)
    {
        self.init()

        baseFrequency        = freqInput
        carrierMultiplier    = carInput
        modulatingMultiplier = modInput
        modulationIndex      = indxInput
        amplitude            = ampInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal FM oscillator */
    internal func bindAll() {
        baseFrequency       .bind(&fosc.memory.freq)
        carrierMultiplier   .bind(&fosc.memory.car)
        modulatingMultiplier.bind(&fosc.memory.mod)
        modulationIndex     .bind(&fosc.memory.indx)
        amplitude           .bind(&fosc.memory.amp)
        dependencies.append(baseFrequency)
        dependencies.append(carrierMultiplier)
        dependencies.append(modulatingMultiplier)
        dependencies.append(modulationIndex)
        dependencies.append(amplitude)
    }

    /** Internal set up function */
    internal func setup() {
        sp_fosc_create(&fosc)
        sp_fosc_init(AKManager.sharedManager.data, fosc, waveform.ftbl)
    }

    /** Computation of the next value */
    override func compute() {
        sp_fosc_compute(AKManager.sharedManager.data, fosc, nil, &leftOutput);
        rightOutput = leftOutput
    }

    /** Release of memory */
    override func teardown() {
        sp_fosc_destroy(&fosc)
    }
}

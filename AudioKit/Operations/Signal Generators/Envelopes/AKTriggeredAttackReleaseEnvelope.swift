//
//  AKTriggeredAttackReleaseEnvelope.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Linear 2-stage Attack/Release envelope generator

This envelope takes 2 triggers. When triggered once, the envelope will rise to 1 according to the attack time. When triggered again, it will decay to 0 according to the decay time.
*/
@objc class AKTriggeredAttackReleaseEnvelope : AKParameter {

    // MARK: - Properties

    private var tenv2 = UnsafeMutablePointer<sp_tenv2>.alloc(1)
    private var tenv22 = UnsafeMutablePointer<sp_tenv2>.alloc(1)

    private var trigger = AKParameter()


    /** Attack duration (in seconds). [Default Value: 0.1] */
    var attackDuration: AKParameter = akp(0.1) {
        didSet {
            attackDuration.bind(&tenv2.memory.atk, right:&tenv22.memory.atk)
            dependencies.append(attackDuration)
        }
    }

    /** Release duration (in seconds). [Default Value: 0.1] */
    var releaseDuration: AKParameter = akp(0.1) {
        didSet {
            releaseDuration.bind(&tenv2.memory.rel, right:&tenv22.memory.rel)
            dependencies.append(releaseDuration)
        }
    }


    // MARK: - Initializers

    /** Instantiates the envelope with default values

    - parameter trigger: Input trigger. 
    */
    init(trigger: AKParameter)
    {
        super.init()
        self.trigger = trigger
        setup()
        dependencies = [trigger]
        bindAll()
    }

    /** Instantiates the envelope with all values

    - parameter trigger: Input trigger. 
    - parameter attackDuration: Attack duration (in seconds). [Default Value: 0.1]
    - parameter releaseDuration: Release duration (in seconds). [Default Value: 0.1]
    */
    convenience init(
        trigger:         AKParameter,
        attackDuration:  AKParameter,
        releaseDuration: AKParameter)
    {
        self.init(trigger: trigger)
        self.attackDuration  = attackDuration
        self.releaseDuration = releaseDuration

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal envelope */
    internal func bindAll() {
        attackDuration .bind(&tenv2.memory.atk, right:&tenv22.memory.atk)
        releaseDuration.bind(&tenv2.memory.rel, right:&tenv22.memory.rel)
        dependencies.append(attackDuration)
        dependencies.append(releaseDuration)
    }

    /** Internal set up function */
    internal func setup() {
        sp_tenv2_create(&tenv2)
        sp_tenv2_create(&tenv22)
        sp_tenv2_init(AKManager.sharedManager.data, tenv2)
        sp_tenv2_init(AKManager.sharedManager.data, tenv22)
    }

    /** Computation of the next value */
    override func compute() {
        sp_tenv2_compute(AKManager.sharedManager.data, tenv2, &(trigger.leftOutput), &leftOutput);
        sp_tenv2_compute(AKManager.sharedManager.data, tenv22, &(trigger.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_tenv2_destroy(&tenv2)
        sp_tenv2_destroy(&tenv22)
    }
}

//
//  AKTriggeredAHDEnvelope.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/15/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Trigger based linear AHD envelope

Only one trigger is required to create the lifetime of this envelope.
*/
@objc class AKTriggeredAHDEnvelope : AKParameter {

    // MARK: - Properties

    private var tenv = UnsafeMutablePointer<sp_tenv>.alloc(1)

    private var trigger = AKParameter()

    /** Attack duration, in seconds. [Default Value: 0.1] */
    private var attackDuration: Float = 0

    /** Hold duration, in seconds. [Default Value: 0.3] */
    private var holdDuration: Float = 0

    /** Release duration, in seconds. [Default Value: 0.2] */
    private var releaseDuration: Float = 0


    /** If set to non-zero value, tenv will multiply the envelope with an internal signal instead of just returning an enveloped signal. [Default Value: 0] */
    var mode: AKParameter = akp(0) {
        didSet {
            tenv.memory.sigmode = Int32(floor(mode.value))
            dependencies.append(mode)
        }
    }

    /** Internal input signal. If sigmode variable is set, it will multiply the envelope by this variable. Most of the time, this should be updated at audiorate. [Default Value: 0] */
    var internalInput: AKParameter = akp(0) {
        didSet {
            internalInput.bind(&tenv.memory.input)
            dependencies.append(internalInput)
        }
    }


    // MARK: - Initializers

    /** Instantiates the envelope with default values

    - parameter trigger: Input trigger. 
    */
    init(trigger sourceInput: AKParameter)
    {
        super.init()
        trigger = sourceInput
        setup()
        dependencies = [trigger]
        bindAll()
    }

    /** Instantiates envelope with constants

    - parameter trigger: Input trigger. 
    - parameter attackDuration: Attack duration, in seconds. [Default Value: 0.1]
    - parameter holdDuration: Hold duration, in seconds. [Default Value: 0.3]
    - parameter releaseDuration: Release duration, in seconds. [Default Value: 0.2]
    */
    init (trigger sourceInput: AKParameter, attackDuration atkInput: Float, holdDuration holdInput: Float, releaseDuration relInput: Float) {
        super.init()
        trigger = sourceInput
        setup(atkInput, holdDuration: holdInput, releaseDuration: relInput)
        dependencies = [trigger]
        bindAll()
    }

    /** Instantiates the envelope with all values

    - parameter trigger: Input trigger. 
    - parameter mode: If set to non-zero value, tenv will multiply the envelope with an internal signal instead of just returning an enveloped signal. [Default Value: 0]
    - parameter internalInput: Internal input signal. If sigmode variable is set, it will multiply the envelope by this variable. Most of the time, this should be updated at audiorate. [Default Value: 0]
    - parameter attackDuration: Attack duration, in seconds. [Default Value: 0.1]
    - parameter holdDuration: Hold duration, in seconds. [Default Value: 0.3]
    - parameter releaseDuration: Release duration, in seconds. [Default Value: 0.2]
    */
    convenience init(
        trigger         sourceInput:  AKParameter,
        mode            sigmodeInput: AKParameter,
        internalInput   inputInput:   AKParameter,
        attackDuration  atkInput:     Float,
        holdDuration    holdInput:    Float,
        releaseDuration relInput:     Float)
    {
        self.init(trigger: sourceInput, attackDuration: atkInput, holdDuration: holdInput, releaseDuration: relInput)
        mode            = sigmodeInput
        internalInput   = inputInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal envelope */
    internal func bindAll() {
        tenv.memory.sigmode = Int32(floor(mode.value))
        internalInput  .bind(&tenv.memory.input)
        dependencies.append(mode)
        dependencies.append(internalInput)
    }

    /** Internal set up function */
    internal func setup(attackDuration: Float = 0.1, holdDuration: Float = 0.3, releaseDuration: Float = 0.2) {
        sp_tenv_create(&tenv)
        sp_tenv_init(AKManager.sharedManager.data, tenv, attackDuration, holdDuration, releaseDuration)
    }

    /** Computation of the next value */
    override func compute() {
        sp_tenv_compute(AKManager.sharedManager.data, tenv, &(trigger.leftOutput), &leftOutput);
        sp_tenv_compute(AKManager.sharedManager.data, tenv, &(trigger.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_tenv_destroy(&tenv)
    }
}

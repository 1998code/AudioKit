//
//  AKEqualizerFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/12/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** A 2nd order tunable equalization filter

A 2nd order tunable equalization filter that provides a peak/notch filter for building parametric/graphic equalizers. With gain above 1, there will be a peak at the center frequency with a width dependent on bandwidth. If gain is less than 1, a notch is formed around the center frequency.
*/
@objc class AKEqualizerFilter : AKParameter {

    // MARK: - Properties

    private var eqfil = UnsafeMutablePointer<sp_eqfil>.alloc(1)

    private var input = AKParameter()


    /** The center frequency of the filter [Default Value: 1000] */
    var centerFrequency: AKParameter = akp(1000) {
        didSet {
            centerFrequency.bind(&eqfil.memory.freq)
            dependencies.append(centerFrequency)
        }
    }

    /** The peak/notch bandwidth in Hertz [Default Value: 100] */
    var bandwidth: AKParameter = akp(100) {
        didSet {
            bandwidth.bind(&eqfil.memory.bw)
            dependencies.append(bandwidth)
        }
    }

    /** The peak/notch gain [Default Value: 10] */
    var gain: AKParameter = akp(10) {
        didSet {
            gain.bind(&eqfil.memory.gain)
            dependencies.append(gain)
        }
    }


    // MARK: - Initializers

    /** Instantiates the filter with default values */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /**
    Instantiates the filter with all values

    - parameter input: Input audio signal. 
    - parameter centerFrequency: The center frequency of the filter [Default Value: 1000]
    - parameter bandwidth: The peak/notch bandwidth in Hertz [Default Value: 100]
    - parameter gain: The peak/notch gain [Default Value: 10]
    */
    convenience init(
        input           sourceInput: AKParameter,
        centerFrequency freqInput:   AKParameter,
        bandwidth       bwInput:     AKParameter,
        gain            gainInput:   AKParameter)
    {
        self.init(input: sourceInput)
        centerFrequency = freqInput
        bandwidth       = bwInput
        gain            = gainInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal filter */
    internal func bindAll() {
        centerFrequency.bind(&eqfil.memory.freq)
        bandwidth      .bind(&eqfil.memory.bw)
        gain           .bind(&eqfil.memory.gain)
        dependencies.append(centerFrequency)
        dependencies.append(bandwidth)
        dependencies.append(gain)
    }

    /** Internal set up function */
    internal func setup() {
        sp_eqfil_create(&eqfil)
        sp_eqfil_init(AKManager.sharedManager.data, eqfil)
    }

    /** Computation of the next value */
    override func compute() {
        sp_eqfil_compute(AKManager.sharedManager.data, eqfil, &(input.leftOutput), &leftOutput);
        sp_eqfil_compute(AKManager.sharedManager.data, eqfil, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_eqfil_destroy(&eqfil)
    }
}

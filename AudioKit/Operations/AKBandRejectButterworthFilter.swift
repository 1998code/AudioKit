//
//  AKBandRejectButterworthFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/12/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** A band-reject Butterworth filter.

These filters are Butterworth second-order IIR filters. They offer an almost flat passband and very good precision and stopband attenuation.
*/
@objc class AKBandRejectButterworthFilter : AKParameter {

    // MARK: - Properties

    private var butbr = UnsafeMutablePointer<sp_butbr>.alloc(1)

    private var input = AKParameter()


    /** Center frequency. (in Hertz) [Default Value: 3000] */
    var centerFrequency: AKParameter = akp(3000) {
        didSet {
            centerFrequency.bind(&butbr.memory.freq)
            dependencies.append(centerFrequency)
        }
    }

    /** Bandwidth. (in Hertz) [Default Value: 2000] */
    var bandwidth: AKParameter = akp(2000) {
        didSet {
            bandwidth.bind(&butbr.memory.bw)
            dependencies.append(bandwidth)
        }
    }


    // MARK: - Initializers

    /** Instantiates the filter with default values */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /**
    Instantiates the filter with all values

    - parameter input: Input audio signal. 
    - parameter centerFrequency: Center frequency. (in Hertz) [Default Value: 3000]
    - parameter bandwidth: Bandwidth. (in Hertz) [Default Value: 2000]
    */
    convenience init(
        input           sourceInput: AKParameter,
        centerFrequency freqInput:   AKParameter,
        bandwidth       bwInput:     AKParameter)
    {
        self.init(input: sourceInput)
        centerFrequency = freqInput
        bandwidth       = bwInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal filter */
    internal func bindAll() {
        centerFrequency.bind(&butbr.memory.freq)
        bandwidth      .bind(&butbr.memory.bw)
        dependencies.append(centerFrequency)
        dependencies.append(bandwidth)
    }

    /** Internal set up function */
    internal func setup() {
        sp_butbr_create(&butbr)
        sp_butbr_init(AKManager.sharedManager.data, butbr)
    }

    /** Computation of the next value */
    override func compute() {
        sp_butbr_compute(AKManager.sharedManager.data, butbr, &(input.leftOutput), &leftOutput);
        sp_butbr_compute(AKManager.sharedManager.data, butbr, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_butbr_destroy(&butbr)
    }
}

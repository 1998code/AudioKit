//
//  AKLowPassFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka on 9/12/15.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Low-pass filter

A first-order recursive low-pass filter with variable frequency response.
*/
@objc class AKLowPassFilter : AKParameter {

    // MARK: - Properties

    private var tone = UnsafeMutablePointer<sp_tone>.alloc(1)

    private var input = AKParameter()


    /** The response curve's half-power point, in Hertz. Half power is defined as peak power / root 2. [Default Value: 1000] */
    var halfPowerPoint: AKParameter = akp(1000) {
        didSet {
            halfPowerPoint.bind(&tone.memory.hp)
            dependencies.append(halfPowerPoint)
        }
    }


    // MARK: - Initializers

    /** Instantiates the filter with default values */
    init(input sourceInput: AKParameter)
    {
        super.init()
        input = sourceInput
        setup()
        dependencies = [input]
        bindAll()
    }

    /**
    Instantiates the filter with all values

    - parameter input: Input audio signal. 
    - parameter halfPowerPoint: The response curve's half-power point, in Hertz. Half power is defined as peak power / root 2. [Default Value: 1000]
    */
    convenience init(
        input          sourceInput: AKParameter,
        halfPowerPoint hpInput:     AKParameter)
    {
        self.init(input: sourceInput)
        halfPowerPoint = hpInput

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal filter */
    internal func bindAll() {
        halfPowerPoint.bind(&tone.memory.hp)
        dependencies.append(halfPowerPoint)
    }

    /** Internal set up function */
    internal func setup() {
        sp_tone_create(&tone)
        sp_tone_init(AKManager.sharedManager.data, tone)
    }

    /** Computation of the next value */
    override func compute() {
        sp_tone_compute(AKManager.sharedManager.data, tone, &(input.leftOutput), &leftOutput);
        sp_tone_compute(AKManager.sharedManager.data, tone, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_tone_destroy(&tone)
    }
}

//
//  <%= node %>DSPKernel.hpp
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 20<%= Time.now.strftime('%y') %> Aurelius Prochazka. All rights reserved.
//

#ifndef <%= node %>DSPKernel_hpp
#define <%= node %>DSPKernel_hpp

#import "AKDSPKernel.hpp"
#import "AKParameterRamper.hpp"

extern "C" {
#include "soundpipe.h"
}

<% if parameters.count > 0 -%>
enum {
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    <%= data["ak-variable"] %>Address = <%= i %><%= "," if i < parameters.count - 1 %>
<% end -%>
<% end -%>
};
<% end -%>

class <%= node %>DSPKernel : public AKDSPKernel {
public:
    // MARK: Member Functions

    <%= node %>DSPKernel() {}

    void init(int channelCount, double inSampleRate) {
        channels = channelCount;

        sampleRate = float(inSampleRate);

        sp_create(&sp);
        sp_<%= sp_module %>_create(&<%= sp_module %>);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>);
<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= sp_module %>-><%= sp_var %> = <%= data["default"] %>;
<% end -%>
<% end -%>
    }

<% tables.each do |table| -%>
<% table.each do |sp_var, data| -%>
    void setup<%= data["ak-variable"].capitalize %>(uint32_t size) {
        <%= sp_var %>_size = size;
        sp_ftbl_create(sp, &<%= sp_var %>, <%= sp_var %>_size);
    }

    void set<%= data["ak-variable"].capitalize %>Value(uint32_t index, float value) {
        <%= sp_var %>->tbl[index] = value;
    }
<% end -%>
<% end -%>

    void start() {
        started = true;
    }

    void stop() {
        started = false;
    }

    void destroy() {
        sp_<%= sp_module %>_destroy(&<%= sp_module %>);
        sp_destroy(&sp);
    }

    void reset() {
    }

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    void set<%= data["ak-variable"].capitalize %>(float <%= sp_var %>) {
        <%= data["ak-variable"] %> = <%= sp_var %>;
        <%= data["ak-variable"] %>Ramper.set(clamp(<%= sp_var %>, (float)<%= data["minimum"] %>, (float)<%= data["maximum"] %>));
    }

<% end -%>
<% end -%>

    void setParameter(AUParameterAddress address, AUValue value) {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                <%= data["ak-variable"] %>Ramper.set(clamp(value, (float)<%= data["minimum"] %>, (float)<%= data["maximum"] %>));
                break;

<% end -%>
<% end -%>
        }
    }

    AUValue getParameter(AUParameterAddress address) {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                return <%= data["ak-variable"] %>Ramper.goal();

<% end -%>
<% end -%>
            default: return 0.0f;
        }
    }

    void startRamp(AUParameterAddress address, AUValue value, AUAudioFrameCount duration) override {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                <%= data["ak-variable"] %>Ramper.startRamp(clamp(value, (float)<%= data["minimum"] %>, (float)<%= data["maximum"] %>), duration);
                break;

<% end -%>
<% end -%>
        }
    }

    void setBuffer<% if type != "generator" -%>s<% end %>(<% if type != "generator" -%>AudioBufferList *inBufferList, <% end %>AudioBufferList *outBufferList) {
<% if type != "generator" -%>
        inBufferListPtr = inBufferList;
<% end -%>
        outBufferListPtr = outBufferList;
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override {
        // For each sample.
        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
            int frameOffset = int(frameIndex + bufferOffset);

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            <%= data["ak-variable"] %> = double(<%= data["ak-variable"] %>Ramper.getStep());
<% end -%>
<% end -%>

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            <%= sp_module %>-><%= sp_var %> = <%= data["ak-variable"] %>;
<% end -%>
<% end -%>

<% if type == "generator" -%>
            float temp = 0;
            for (int channel = 0; channel < channels; ++channel) {
                float *out = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;
                if (started) {
                    if (channel == 0) {
                        sp_<%= sp_module %>_compute(sp, <%= sp_module %>, nil, &temp);
                    }
                    *out = temp;
                } else {
                    *out = 0.0;
                }
            }
<% else -%>
            if (!started) {
                outBufferListPtr->mBuffers[0] = inBufferListPtr->mBuffers[0];
                outBufferListPtr->mBuffers[1] = inBufferListPtr->mBuffers[1];
                return;
            }
            for (int channel = 0; channel < channels; ++channel) {
                float *in  = (float *)inBufferListPtr->mBuffers[channel].mData  + frameOffset;
                float *out = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;

                sp_<%= sp_module %>_compute(sp, <%= sp_module %>, in, out);
            }
<% end -%>
        }
    }

    // MARK: Member Variables

private:

    int channels = 2;
    float sampleRate = 44100.0;

<% if type != "generator" -%>
    AudioBufferList *inBufferListPtr = nullptr;
<% end -%>
    AudioBufferList *outBufferListPtr = nullptr;

    sp_data *sp;
    sp_<%= sp_module %> *<%= sp_module %>;

<% tables.each do |table| -%>
<% table.each do |sp_var, data| -%>
    sp_ftbl *<%= sp_var %>;
    UInt32 <%= sp_var %>_size = 4096;
<% end -%>
<% end -%>

<% if parameters.count > 0 -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    float <%= data["ak-variable"] %> = <%= data["default"] %>;
<% end -%>
<% end -%>
<% end -%>

public:
<% if type == "generator" -%>
    bool started = false;
<% else -%>
    bool started = true;
<% end -%>
<% if parameters.count > 0 -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    AKParameterRamper <%= data["ak-variable"] %>Ramper = <%= data["default"] %>;
<% end -%>
<% end -%>
<% end -%>
};

#endif /* <%= node %>DSPKernel_hpp */

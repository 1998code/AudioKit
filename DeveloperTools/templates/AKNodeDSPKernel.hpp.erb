//
//  <%= node %>DSPKernel.hpp
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 20<%= Time.now.strftime('%y') %> Aurelius Prochazka. All rights reserved.
//

#ifndef <%= node %>DSPKernel_hpp
#define <%= node %>DSPKernel_hpp

#import "AKDSPKernel.hpp"
#import "AKParameterRamper.hpp"

extern "C" {
#include "soundpipe.h"
}

<% if parameters.count > 0 -%>
enum {
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    <%= data["ak-variable"] %>Address = <%= i %><%= "," if i < parameters.count - 1 %>
<% end -%>
<% end -%>
};
<% end -%>

class <%= node %>DSPKernel : public AKDSPKernel {
public:
    // MARK: Member Functions

    <%= node %>DSPKernel() {}

    void init(int channelCount, double inSampleRate) {
        channels = channelCount;

        sampleRate = float(inSampleRate);

        sp_create(&sp);
        sp_<%= sp_module %>_create(&<%= sp_module %>);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>);
<% (parameters+constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= sp_module %>-><%= sp_var %> = <%= data["default"] %>;
<% end -%>
<% end -%>
    }

    void reset() {
    }

    void setParameter(AUParameterAddress address, AUValue value) {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                <%= data["ak-variable"] %>Ramper.set(clamp(value, (float)<%= data["minimum"] %>, (float)<%= data["maximum"] %>));
                break;

<% end -%>
<% end -%>
        }
    }

    AUValue getParameter(AUParameterAddress address) {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                return <%= data["ak-variable"] %>Ramper.goal();

<% end -%>
<% end -%>
            default: return 0.0f;
        }
    }

    void startRamp(AUParameterAddress address, AUValue value, AUAudioFrameCount duration) override {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                <%= data["ak-variable"] %>Ramper.startRamp(clamp(value, (float)<%= data["minimum"] %>, (float)<%= data["maximum"] %>), duration);
                break;

<% end -%>
<% end -%>
        }
    }

    void setBuffers(AudioBufferList* inBufferList, AudioBufferList* outBufferList) {
        inBufferListPtr = inBufferList;
        outBufferListPtr = outBufferList;
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override {
        // For each sample.
        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            double <%= data["ak-variable"] %> = double(<%= data["ak-variable"] %>Ramper.getStep());
<% end -%>
<% end -%>

            int frameOffset = int(frameIndex + bufferOffset);

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            <%= sp_module %>-><%= sp_var %> = (float)<%= data["ak-variable"] %>;
<% end -%>
<% end -%>

            for (int channel = 0; channel < channels; ++channel) {
                float* in  = (float*)inBufferListPtr->mBuffers[channel].mData  + frameOffset;
                float* out = (float*)outBufferListPtr->mBuffers[channel].mData + frameOffset;

                sp_<%= sp_module %>_compute(sp, <%= sp_module %>, in, out);
            }
        }
    }

    // MARK: Member Variables

private:

    int channels = 2;
    float sampleRate = 44100.0;

    AudioBufferList* inBufferListPtr = nullptr;
    AudioBufferList* outBufferListPtr = nullptr;

    sp_data *sp;
    sp_<%= sp_module %> *<%= sp_module %>;

<% if parameters.count > 0 -%>
public:
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    AKParameterRamper <%= data["ak-variable"] %>Ramper = <%= data["default"] %>;
<% end -%>
<% end -%>
<% end -%>
};

#endif /* <%= node %>DSPKernel_hpp */

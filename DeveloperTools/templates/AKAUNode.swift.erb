//
//  AK<%= au_name %>.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 20<%= Time.now.strftime('%y') %> Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/// AudioKit version of Apple's <%= au_name %> Audio Unit
///
/// - parameter input: Input node to process
<% parameters.each do |parameter| -%>
/// - parameter <%= parameter[:variable] %>: <%= parameter[:variable].underscore.humanize.titlecase %> (<%= parameter[:type] %>) ranges from <%= parameter[:min] %> to <%= parameter[:max] %> (Default: <%= parameter[:default] %>)
<% end -%>
///
public class AK<%= au_name %>: AKNode, AKToggleable {

    private let cd = AudioComponentDescription(
        componentType: kAudioUnitType_Effect,
        componentSubType: kAudioUnitSubType_<%= au_name %>,
        componentManufacturer: kAudioUnitManufacturer_Apple,
        componentFlags: 0,
        componentFlagsMask: 0)

    internal var internalEffect = AVAudioUnitEffect()
    internal var internalAU = AudioUnit()

    /// Required property for AKNode containing the output node
    public var avAudioNode: AVAudioNode

    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()

    private var mixer: AKMixer

<% parameters.each do |parameter| -%>
    /// <%= parameter[:variable].underscore.humanize.titlecase %> (<%= parameter[:type] %>) ranges from <%= parameter[:min] %> to <%= parameter[:max] %> (Default: <%= parameter[:default] %>)
    public var <%= parameter[:variable] %>: Double = <%= parameter[:default] %> {
        didSet {<% if parameter[:min] != "" %>
            if <%= parameter[:variable] %> < <%= parameter[:min] %> {
                <%= parameter[:variable] %> = <%= parameter[:min] %>
            }<% end -%>
            <% if parameter[:max] != "" %>
            if <%= parameter[:variable] %> > <%= parameter[:max] %> {
                <%= parameter[:variable] %> = <%= parameter[:max] %>
            }<% end %>
            AudioUnitSetParameter(
                internalAU,
                <%= parameter[:k_prefix] %>_<%= parameter[:name] %>,
                kAudioUnitScope_<%= parameter[:scope] %>, 0,
                Float(<%= parameter[:variable] %>), 0)
        }
    }

<% end -%>
    /// Dry/Wet Mix (Default 100)
    public var dryWetMix: Double = 100 {
        didSet {
            if dryWetMix < 0 {
                dryWetMix = 0
            }
            if dryWetMix > 100 {
                dryWetMix = 100
            }
            inputGain?.gain = 1 - dryWetMix / 100
            effectGain?.gain = dryWetMix / 100
        }
    }

    private var lastKnownMix: Double = 100
    private var inputGain: AKGain?
    private var effectGain: AKGain?

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Initialize the <%= au_name.underscore.humanize.uncapitalize %> node
    ///
    /// - parameter input: Input node to process
<% parameters.each do |parameter| -%>
    /// - parameter <%= parameter[:variable] %>: <%= parameter[:variable].underscore.humanize.titlecase %> (<%= parameter[:type] %>) ranges from <%= parameter[:min] %> to <%= parameter[:max] %> (Default: <%= parameter[:default] %>)
<% end -%>
    ///
    public init(
        _ input: AKNode,
<% parameters.each_with_index do |parameter, i| -%>
        <%= parameter[:variable] %>: Double = <%= parameter[:default] %><%= ",\n" if i < parameters.count - 1 -%>
<% end %>) {

<% parameters.each do |parameter| -%>
            self.<%= parameter[:variable] %> = <%= parameter[:variable] %>
<% end -%>

            inputGain = AKGain(input, gain: 0)
            mixer = AKMixer(inputGain!)

            effectGain = AKGain(input, gain: 1)

            internalEffect = AVAudioUnitEffect(audioComponentDescription: cd)
            AKManager.sharedInstance.engine.attachNode(internalEffect)
            internalAU = internalEffect.audioUnit
            AKManager.sharedInstance.engine.connect((effectGain?.avAudioNode)!, to: internalEffect, format: AKManager.format)
            AKManager.sharedInstance.engine.connect(internalEffect, to: mixer.avAudioNode, format: AKManager.format)
            self.avAudioNode = mixer.avAudioNode

<% parameters.each do |parameter| -%>
            AudioUnitSetParameter(internalAU, <%= parameter[:k_prefix] %>_<%= parameter[:name] %>, kAudioUnitScope_<%= parameter[:scope] %>, 0, Float(<%= parameter[:variable] %>), 0)
<% end -%>
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        if isStopped {
            dryWetMix = lastKnownMix
            isStarted = true
        }
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        if isPlaying {
            lastKnownMix = dryWetMix
            dryWetMix = 0
            isStarted = false
        }
    }
}

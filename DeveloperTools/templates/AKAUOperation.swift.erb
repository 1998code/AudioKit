//
//  AKAU<%= au_name %>.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 20<%= Time.now.strftime('%y') %> Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/** AudioKit version of Apple's <%= au_name %> Audio Unit */
public class AKAU<%= au_name %>: AKOperation {

    private let cd = AudioComponentDescription(
        componentType: kAudioUnitType_Effect,
        componentSubType: kAudioUnitSubType_<%= au_name %>,
        componentManufacturer: kAudioUnitManufacturer_Apple,
        componentFlags: 0,
        componentFlagsMask: 0)

    private var internalEffect = AVAudioUnitEffect()
    private var internalAU = AudioUnit()

<% parameters.each do |parameter| -%>
    /** <%= parameter[:variable].underscore.humanize.titlecase %> (<%= parameter[:type] %>) ranges from <%= parameter[:min] %> to <%= parameter[:max] %> (Default: <%= parameter[:default] %>) */
    public var <%= parameter[:variable] %>: Float = <%= parameter[:default] %> {
        didSet {<% if parameter[:min] != "" %>
            if <%= parameter[:variable] %> < <%= parameter[:min] %> {
                <%= parameter[:variable] %> = <%= parameter[:min] %>
            }<% end -%>
            <% if parameter[:max] != "" %>
            if <%= parameter[:variable] %> > <%= parameter[:max] %> {
                <%= parameter[:variable] %> = <%= parameter[:max] %>
            }<% end %>
            AudioUnitSetParameter(
                internalAU,
                <%= parameter[:k_prefix] %>_<%= parameter[:name] %>,
                kAudioUnitScope_<%= parameter[:scope] %>, 0,
                <%= parameter[:variable] %>, 0)
        }
    }

<% end -%>
    /** Initialize the <%= au_name.underscore.humanize.uncapitalize %> operation */
    public init(
        _ input: AKOperation,
<% parameters.each_with_index do |parameter, i| -%>
        <%= parameter[:variable] %>: Float = <%= parameter[:default] %><%= ",\n" if i < parameters.count - 1 %><% end %>)
    {
<% parameters.each do |parameter| -%>
        self.<%= parameter[:variable] %> = <%= parameter[:variable] %>
<% end -%>
        super.init()

        internalEffect = AVAudioUnitEffect(audioComponentDescription: cd)
        output = internalEffect
        AKManager.sharedInstance.engine.attachNode(internalEffect)
        AKManager.sharedInstance.engine.connect(input.output!, to: internalEffect, format: nil)
        internalAU = internalEffect.audioUnit
    }
}


//
//  <%= operation %>.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 20<%= Time.now.strftime('%y') %> Aurelius Prochazka. All rights reserved.
//

import Foundation

/** <%= summary %>

<%= description %>
*/
@objc class <%= operation %> : AKParameter {

    // MARK: - Properties

    private var <%= sp_module %> = UnsafeMutablePointer<sp_<%= sp_module %>>.alloc(1)
<% if inputCount == 1  && outputCount != 2 -%>
    private var <%= sp_module %>2 = UnsafeMutablePointer<sp_<%= sp_module %>>.alloc(1)
<% end -%>

<% inputs.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    private var <%= data["ak-variable"] %> = AKParameter()
<% end %>
<% end -%>
<% constants.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    /** <%= data["comment"] %> [Default Value: <%= data["default"] -%>] */
    private var <%= data["ak-variable"] %>: <%= data["type"] || "Float" -%> = 0
<% end %>
<% end -%>

<% tables.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    /** <%= data["comment"] %> [Default Value: <%= data["default"] -%>] */
    var <%= data["ak-variable"] %> = AKTable.standardSineWave() {
        didSet {
            <%= sp_module %>.memory.<%= sp_var %> = <%= data["ak-variable"] %>.ftbl
<% if inputCount == 1  && outputCount != 2 -%>
            <%= sp_module %>2.memory.<%= sp_var %> = <%= data["ak-variable"] %>.ftbl
<% end -%>
        }
    }
<% end %>
<% end -%>
<% (parameters+constantParameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    /** <%= data["comment"] %> [Default Value: <%= data["default"] -%>] */
    var <%= data["ak-variable"] %>: AKParameter = akp(<%= data["default"] -%>) {
        didSet {
<% if data["type"].blank? -%>
<% if inputCount == 1  && outputCount != 2 -%>
            <%= data["ak-variable"] %>.bind(&<%= sp_module %>.memory.<%= sp_var %>, right:&<%= sp_module %>2.memory.<%= sp_var %>)
<% else -%>
            <%= data["ak-variable"] %>.bind(&<%= sp_module %>.memory.<%= sp_var %>)
<% end -%>
<% else -%>
            <%= sp_module %>.memory.<%= sp_var %> = <%= data["type"] %>(floor(<%= data["ak-variable"] %>.value))
<% if inputCount == 1  && outputCount != 2 -%>
            <%= sp_module %>2.memory.<%= sp_var %> = <%= data["type"] %>(floor(<%= data["ak-variable"] %>.value))
<% end -%>
<% end -%>
            dependencies.append(<%= data["ak-variable"] %>)
        }
    }
<% end %>
<% end -%>

    // MARK: - Initializers

    /** Instantiates the <%= shortDescription %> with default values
<% if inputs.count > 0 -%>

<% inputs.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    - parameter <%= data["ak-variable"] %>: <%= data["comment"] %> <% if !data["default"].blank? %>[Default Value: <%= data["default"] -%>]<% end %>
<% end -%>
<% end -%>
<% end -%>
    */
    <%= "override " if inputs.count == 0 %>init(<% if inputs.count > 0 %><% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= "_ " if i==0 && data["ak-variable"]=="input" %><%= data["ak-variable"] %>: AKParameter<%= i + 1 < inputs.count ? ", " : ")" -%>
<% end -%>
<% end %><% else %>)<% end %>
    {
        super.init()
<% inputs.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        self.<%= data["ak-variable"] %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>
        setup()
<% if inputs.count > 0 -%>
        dependencies = [<% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %><%= i + 1 < inputs.count ? ", " : "" -%>
<% end -%>
<% end -%>]
<% end -%>
        bindAll()
    }
<% if constants.count > 0 %>
    /** Instantiates <%= shortDescription %> with constants

<% (inputs+constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    - parameter <%= data["ak-variable"] %>: <%= data["comment"] %> <% if !data["default"].blank? %>[Default Value: <%= data["default"] -%>]<% end %><% end %>
<% end -%>
    */
    init (<% if (inputs+constants).count > 0 %><% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= "_ " if i==0 && data["ak-variable"]=="input" %><%= data["ak-variable"] %>: AKParameter<%= i + 1 < (inputs+constants).count ? ", " : ")" -%>
<% end -%>
<% end %><% else %>)<% end %><% constants.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %>: <%= data["type"] || "Float" -%><%= i + 1 < constants.count ? ", " : ") {" -%>
<% end -%>
<% end -%>

        super.init()
<% inputs.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        self.<%= data["ak-variable"] %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>
        setup(<% constants.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if constants.count > 1 %><%= data["ak-variable"] %>: <% end %><%= data["ak-variable"] %><%= i + 1 < constants.count ? ", " : ")" -%>
<% end -%>
<% end %>
<% if inputs.count > 0 -%>
        dependencies = [<% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %><%= i + 1 < inputs.count ? ", " : "" -%>
<% end -%>
<% end -%>]
<% end -%>
        bindAll()
    }
<% end -%>
<% if parameters.count > 0 %>
    /** Instantiates the <%= shortDescription %> with all values

<% (tables+inputs+parameters+constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    - parameter <%= data["ak-variable"] %>: <%= data["comment"] %> <% if !data["default"].blank? %>[Default Value: <%= data["default"] -%>]<% end %>
<% end -%>
<% end -%>
    */
    convenience init(
<% tables.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: <%= ak_pad(data["ak-variable"]) %>AKTable<%= i + 1 < (tables+inputs+parameters+constants).count ? "," : ")" %>
<% end -%>
<% end -%>
<% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= "_ " if i==0 && data["ak-variable"]=="input" %><%= data["ak-variable"] %>: <%= ak_pad(data["ak-variable"]) %>AKParameter<%= i + 1 < (inputs+parameters+constants).count ? "," : ")" %>
<% end -%>
<% end -%>
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: <%= ak_pad(data["ak-variable"]) %>AKParameter<%= i + 1 < (parameters+constants).count ? "," : ")" %>
<% end -%>
<% end -%>
<% constants.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: <%= ak_pad(data["ak-variable"]) %><%= data["type"] || "Float" -%><%= i + 1 < constants.count ? "," : ")" %>
<% end -%>
<% end -%>
    {
        self.init(<% if (inputs+constants).count > 0 %><% (inputs+constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if i > 0 || data["ak-variable"]!="input" %><%= data["ak-variable"] %>: <% end %><%= data["ak-variable"] %><%= i + 1 < (inputs+constants).count ? ", " : ")" -%>
<% end -%>
<% end -%><% else %>)
<% end -%>

<% (tables+parameters).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        self.<%= data["ak-variable"] %><%= ak_pad(data["ak-variable"]) %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>

        bindAll()
    }
<% end -%>
<% if presets.count > 0 -%>

    // MARK: - Presets

<% presets.each do |preset| -%>
<% preset.each do |presetName, presetParameters| -%>
    /** Class function to create the <%= shortDescription %> with the <%= presetName.underscore.humanize.downcase %> preset parameters. <%= presetParameters["comment"] %>
    */
    class func preset<%= presetName.camelize() %>(<% if inputs.count > 0 %><% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %>: AKParameter<%= i + 1 < inputs.count ? ", " : "" -%>
<% end -%>
<% end %><% else %><% end %>) -> <%= operation %> {
        let <%= shortDescription %> = <%= operation %>(<% if inputs.count > 0 %><% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if i>0 && data["ak-variable"]!="input" %><%= data["ak-variable"] %>: <% end %><%= data["ak-variable"] %><%= i + 1 < (inputs+constants).count ? ", " : "" -%>
<% end -%>
<% end -%>
<% end -%><% if presetParameters["constants"] %><% presetParameters["constants"].each do |ak-variable, value| -%>
<%= ak-variable %>: <%= value -%>
<% end -%><% end -%>)
<% presetParameters["parameters"].each do |ak-variable, value| -%>
<% if ak-variable != "comment" -%>
        <%= shortDescription %>.<%= ak-variable %><%= ak_pad(ak-variable) %> = akp(<%= value %>)
<% end -%>
<% end -%>
        return <%= shortDescription %>
    }
<% end -%>
<% end -%>
<% end -%>

    // MARK: - Internals

    /** Bind every property to the internal <%= shortDescription %> */
    internal func bindAll() {
<% tables.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= sp_module %>.memory.<%= sp_var %> = <%= data["ak-variable"] %>.ftbl
<% if inputCount == 1  && outputCount != 2 -%>
        <%= sp_module %>2.memory.<%= sp_var %> = <%= data["ak-variable"] %>.ftbl
<% end -%>
<% end -%>
<% end -%>
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if data["type"].blank? -%>
<% if inputCount == 1  && outputCount != 2 -%>
        <%= data["ak-variable"] %><%= ak_pad(data["ak-variable"]) %>.bind(&<%= sp_module %>.memory.<%= sp_var %>, right:&<%= sp_module %>2.memory.<%= sp_var %>)
<% else -%>
        <%= data["ak-variable"] %><%= ak_pad(data["ak-variable"]) %>.bind(&<%= sp_module %>.memory.<%= sp_var %>)
<% end -%>
<% else -%>
        <%= sp_module %>.memory.<%= sp_var %> = <%= data["type"] %>(floor(<%= data["ak-variable"] %>.value))
<% if inputCount == 1  && outputCount != 2 -%>
        <%= sp_module %>2.memory.<%= sp_var %> = <%= data["type"] %>(floor(<%= data["ak-variable"] %>.value))
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        dependencies.append(<%= data["ak-variable"] %>)
<% end -%>
<% end -%>
    }

    /** Internal set up function */
    internal func setup(<% if constants.count > 0 %><% constants.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %>: <%= data["type"] || "Float" -%> = <%= data["default"] %><%= i + 1 < constants.count ? ", " : ")" -%>
<% end -%>
<% end -%><% else %>)<% end %> {
        sp_<%= sp_module %>_create(&<%= sp_module %>)
<% if inputCount == 1  && outputCount != 2 -%>
        sp_<%= sp_module %>_create(&<%= sp_module %>2)
<% end -%>
        sp_<%= sp_module %>_init(AKManager.sharedManager.data, <%= sp_module %><% if (tables+constants).count > 0 %>, <% tables.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %>.ftbl<%= i + 1 < (tables+constants).count ? ", " : ")" -%>
<% end -%>
<% end -%><% constants.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %><%= i + 1 < constants.count ? ", " : ")" -%>
<% end -%>
<% end %><% else %>)<% end %>
<% if inputCount == 1  && outputCount != 2 -%>
        sp_<%= sp_module %>_init(AKManager.sharedManager.data, <%= sp_module %>2<% if (tables+constants).count > 0 %>, <% tables.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %>.ftbl<%= i + 1 < (tables+constants).count ? ", " : ")" -%>
<% end -%>
<% end -%><% constants.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<%= data["ak-variable"] %><%= i + 1 < constants.count ? ", " : ")" -%>
<% end -%>
<% end %><% else %>)<% end %>
<% end -%>
    }

    /** Computation of the next value */
    override func compute() {
        sp_<%= sp_module %>_compute(AKManager.sharedManager.data, <%= sp_module %>, <% if inputs.count > 0 %><% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
&(<%= data["ak-variable"] %>.leftOutput)<% if inputCount == 2 %>, &(<%= data["ak-variable"] %>.rightOutput)<% end %><%= i + 1 < inputs.count ? ", " : "" %><% end -%>
<% end -%><% else %>nil<% end %>, <% if outputCount == 2 %>&leftOutput, &rightOutput<% else %>&leftOutput<% end %>);
<% if inputCount == 1  && outputCount != 2 -%>
        sp_<%= sp_module %>_compute(AKManager.sharedManager.data, <%= sp_module %>2, <% if inputs.count > 0 %><% inputs.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
&(<%= data["ak-variable"] %>.rightOutput)<%= i + 1 < inputs.count ? ", " : "" %><% end -%>
<% end -%><% else %>nil<% end %>, &rightOutput);
<% elsif outputCount != 2 -%>
        rightOutput = leftOutput
<% else %><% end -%>
    }

    /** Release of memory */
    override func teardown() {
        sp_<%= sp_module %>_destroy(&<%= sp_module %>)
<% if inputCount == 1  && outputCount != 2 -%>
        sp_<%= sp_module %>_destroy(&<%= sp_module %>2)
<% end -%>
    }
}

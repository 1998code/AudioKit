<%= header_partial %>

/// <%= description %>
///
<% if inputs.count > 0 -%>
/// - parameter input: Input node to process
<% end -%>
<% (parameters + constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
/// - parameter <%= data["ak-variable"] %>: <%= data["comment"] %>
<% end -%>
<% end -%>
///
public class <%= node %>: AKVoice {

    // MARK: - Properties

    /// Required property for AKNode
    public var avAudioNode: AVAudioNode
    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()

    internal var internalAU: <%= node %>AudioUnit?
    internal var token: AUParameterObserverToken?

<% tables.each do |table| -%>
<% table.each do |sp_var, data| -%>
    private var <%= data["ak-variable"] %>: AKTable?
<% end -%>
<% end -%>

<%= parameters_partial -%>
    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted: Bool {
        return internalAU!.isPlaying()
    }

    // MARK: - Initialization

    /// Initialize this <%= one_word_desc %> node
    ///
<% if inputs.count > 0 -%>
    /// - parameter input: Input node to process
<% end -%>
<% (parameters + constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    /// - parameter <%= data["ak-variable"] %>: <%= data["comment"] %>
<% end -%>
<% end -%>
    ///
    public init(
<% tables.each do |table| -%>
<% table.each do |sp_var, data| -%>
        <%= data["ak-variable"] %>: AKTable = AKTable(.Sine),
<% end -%>
<% end -%>
<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: Double = <%= data["default"] %><%= ",\n" if i < (parameters + constants).count - 1 %><% end %><% end %>) {


<% (tables+parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        self.<%= data["ak-variable"] %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>

<%= description_partial %>

<%= audio_unit_setup_partial %>

<%= parameter_observation_partial %>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        internalAU?.<%= data["ak-variable"] %> = Float(<%= data["ak-variable"] %>)
<% end -%>
<% end -%>
    }

    /// Function create an identical new node for use in creating polyphonic instruments
    public func copy() -> AKVoice {
        let copy = <%= node %>(<% (tables + parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%><%= data["ak-variable"] %>: self.<%= data["ak-variable"] %><%= ", " if i < (tables + parameters + constants).count - 1 %><% end %><% end %>)
        return copy
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        self.internalAU!.start()
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        self.internalAU!.stop()
    }
}

//
//  AKPhasor.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** A normalized moving phase value.

Produces a normalized sawtooth wave between the values of 0 and 1. Phasors are often used when building table-lookup oscillators.
*/
@objc class AKPhasor : AKParameter {

    // MARK: - Properties

    private var phasor = UnsafeMutablePointer<sp_phasor>.alloc(1)

    /** Initial phase [Default Value: 0] */
    private var phase: Float = 0


    /** Frequency in cycles per second, or Hz. [Default Value: 1] */
    var frequency: AKParameter = akp(1) {
        didSet {
            frequency.bind(&phasor.memory.freq)
            dependencies.append(frequency)
        }
    }


    // MARK: - Initializers

    /** Instantiates the phasor with default values
    */
    override init()
    {
        super.init()
        setup()
        bindAll()
    }

    /** Instantiates phasor with constants

    - parameter phase: Initial phase [Default Value: 0]
    */
    init (phase: Float) {
        super.init()
        setup(phase)
        bindAll()
    }

    /** Instantiates the phasor with all values

    - parameter frequency: Frequency in cycles per second, or Hz. [Default Value: 1]
    - parameter phase: Initial phase [Default Value: 0]
    */
    convenience init(
        frequency: AKParameter,
        phase:     Float)
    {
        self.init(phase: phase)
        self.frequency = frequency

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal phasor */
    internal func bindAll() {
        frequency.bind(&phasor.memory.freq)
        dependencies.append(frequency)
    }

    /** Internal set up function */
    internal func setup(phase: Float = 0) {
        sp_phasor_create(&phasor)
        sp_phasor_init(AKManager.sharedManager.data, phasor, phase)
    }

    /** Computation of the next value */
    override func compute() {
        sp_phasor_compute(AKManager.sharedManager.data, phasor, nil, &leftOutput);
        rightOutput = leftOutput
    }

    /** Release of memory */
    override func teardown() {
        sp_phasor_destroy(&phasor)
    }
}

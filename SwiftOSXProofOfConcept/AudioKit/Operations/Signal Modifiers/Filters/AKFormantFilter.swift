//
//  AKFormantFilter.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2015 Aurelius Prochazka. All rights reserved.
//

import Foundation

/** Formant filter

When fed with a pulse train, it will generate a series of overlapping grains. Overlapping will occur when 1/freq < dec, but there is no upper limit on the number of overlaps. (cited from www.csounds.com/manual/html/fofilter.html)
*/
@objc class AKFormantFilter : AKParameter {

    // MARK: - Properties

    private var fofilt = UnsafeMutablePointer<sp_fofilt>.alloc(1)
    private var fofilt2 = UnsafeMutablePointer<sp_fofilt>.alloc(1)

    private var input = AKParameter()


    /** Center frequency. [Default Value: 1.5] */
    var centerFrequency: AKParameter = akp(1.5) {
        didSet {
            centerFrequency.bind(&fofilt.memory.freq, right:&fofilt2.memory.freq)
            dependencies.append(centerFrequency)
        }
    }

    /** Impulse response attack time (in seconds). [Default Value: 0.007] */
    var attackDuration: AKParameter = akp(0.007) {
        didSet {
            attackDuration.bind(&fofilt.memory.atk, right:&fofilt2.memory.atk)
            dependencies.append(attackDuration)
        }
    }

    /** Impulse reponse decay time (in seconds) [Default Value: 0.04] */
    var decayDuration: AKParameter = akp(0.04) {
        didSet {
            decayDuration.bind(&fofilt.memory.dec, right:&fofilt2.memory.dec)
            dependencies.append(decayDuration)
        }
    }


    // MARK: - Initializers

    /** Instantiates the filter with default values

    - parameter input: Input audio signal. 
    */
    init(_ input: AKParameter)
    {
        super.init()
        self.input = input
        setup()
        dependencies = [input]
        bindAll()
    }

    /** Instantiates the filter with all values

    - parameter input: Input audio signal. 
    - parameter centerFrequency: Center frequency. [Default Value: 1.5]
    - parameter attackDuration: Impulse response attack time (in seconds). [Default Value: 0.007]
    - parameter decayDuration: Impulse reponse decay time (in seconds) [Default Value: 0.04]
    */
    convenience init(
        _ input:         AKParameter,
        centerFrequency: AKParameter,
        attackDuration:  AKParameter,
        decayDuration:   AKParameter)
    {
        self.init(input)
        self.centerFrequency = centerFrequency
        self.attackDuration  = attackDuration
        self.decayDuration   = decayDuration

        bindAll()
    }

    // MARK: - Internals

    /** Bind every property to the internal filter */
    internal func bindAll() {
        centerFrequency.bind(&fofilt.memory.freq, right:&fofilt2.memory.freq)
        attackDuration .bind(&fofilt.memory.atk, right:&fofilt2.memory.atk)
        decayDuration  .bind(&fofilt.memory.dec, right:&fofilt2.memory.dec)
        dependencies.append(centerFrequency)
        dependencies.append(attackDuration)
        dependencies.append(decayDuration)
    }

    /** Internal set up function */
    internal func setup() {
        sp_fofilt_create(&fofilt)
        sp_fofilt_create(&fofilt2)
        sp_fofilt_init(AKManager.sharedManager.data, fofilt)
        sp_fofilt_init(AKManager.sharedManager.data, fofilt2)
    }

    /** Computation of the next value */
    override func compute() {
        sp_fofilt_compute(AKManager.sharedManager.data, fofilt, &(input.leftOutput), &leftOutput);
        sp_fofilt_compute(AKManager.sharedManager.data, fofilt2, &(input.rightOutput), &rightOutput);
    }

    /** Release of memory */
    override func teardown() {
        sp_fofilt_destroy(&fofilt)
        sp_fofilt_destroy(&fofilt2)
    }
}

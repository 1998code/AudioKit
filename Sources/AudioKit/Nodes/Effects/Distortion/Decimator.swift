// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation

/// AudioKit version of Apple's Decimator Audio Unit
///
public class Decimator: Node {

    fileprivate let effectAU = AVAudioUnitEffect(appleEffect: kAudioUnitSubType_Distortion)

    let input: Node

    /// Connected nodes
    public var connections: [Node] { [input] }

    /// Underlying AVAudioNode
    public var avAudioNode: AVAudioNode { effectAU }

    /// Specification details for decimation
    public static let decimationDef = NodeParameterDef(
        identifier: "decimation",
        name: "Decimation",
        address: AUParameterAddress(kDistortionParam_Decimation),
        defaultValue: 50,
        range: 0 ... 100,
        unit: .percent)

    /// Decimation (Percent) ranges from 0 to 100 (Default: 50)
    @Parameter(decimationDef) public var decimation: AUValue

    /// Specification details for rounding
    public static let roundingDef = NodeParameterDef(
        identifier: "rounding",
        name: "Rounding",
        address: AUParameterAddress(kDistortionParam_Rounding),
        defaultValue: 0,
        range: 0 ... 100,
        unit: .percent)

    /// Rounding (Percent) ranges from 0 to 100 (Default: 0)
    @Parameter(roundingDef) public var rounding: AUValue

    /// Specification details for finalMix
    public static let finalMixDef = NodeParameterDef(
        identifier: "finalMix",
        name: "Final Mix",
        address: AUParameterAddress(kDistortionParam_FinalMix),
        defaultValue: 50,
        range: 0 ... 100,
        unit: .percent)

    /// Final Mix (Percent) ranges from 0 to 100 (Default: 50)
    @Parameter(finalMixDef) public var finalMix: AUValue

    /// Specification details for polynomialMix
    private static let polynomialMixDef = NodeParameterDef(
        identifier: "polynomialMix",
        name: "Polynomial Mix",
        address: AUParameterAddress(kDistortionParam_PolynomialMix),
        defaultValue: 0,
        range: 0 ... 100,
        unit: .percent)

    /// Polynomial Mix (Percent) ranges from 0 to 100 (Default: 50). Turned off specifically for decimator
    @Parameter(polynomialMixDef) private var polynomialMix: AUValue

    /// Specification details for delayMix
    private static let delayMixDef = NodeParameterDef(
        identifier: "delayMix",
        name: "Delay Mix",
        address: AUParameterAddress(kDistortionParam_DelayMix),
        defaultValue: 0,
        range: 0 ... 100,
        unit: .percent)

    /// Delay Mix (Percent) ranges from 0 to 100 (Default: 50). Turned off specifically for decimator
    @Parameter(delayMixDef) private var delayMix: AUValue

    /// Specification details for ringModMix
    private static let ringModMixDef = NodeParameterDef(
        identifier: "ringModMix",
        name: "RingMod Mix",
        address: AUParameterAddress(kDistortionParam_RingModMix),
        defaultValue: 0,
        range: 0 ... 100,
        unit: .percent)

    /// Ring Mod Mix (Percent) ranges from 0 to 100 (Default: 50). Turned off specifically for decimator
    @Parameter(ringModMixDef) private var ringModMix: AUValue

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Initialize the decimator node
    ///
    /// - parameter input: Input node to process
    /// - parameter decimation: Decimation (Percent) ranges from 0 to 100 (Default: 50)
    /// - parameter rounding: Rounding (Percent) ranges from 0 to 100 (Default: 0)
    /// - parameter finalMix: Final Mix (Percent) ranges from 0 to 100 (Default: 50)
    ///
    public init(
        _ input: Node,
        decimation: AUValue = decimationDef.defaultValue,
        rounding: AUValue = roundingDef.defaultValue,
        finalMix: AUValue = finalMixDef.defaultValue) {
        self.input = input

        associateParams(with: effectAU)

        self.decimation = decimation
        self.rounding = rounding
        self.finalMix = finalMix
        // Since this is the Decimator, mix it to 100% and use the final mix as the mix parameter

        self.ringModMix = 0
        self.polynomialMix = 0
        self.delayMix = 0
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        effectAU.bypass = false
        isStarted = true
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        effectAU.bypass = true
        isStarted = false
    }
}
